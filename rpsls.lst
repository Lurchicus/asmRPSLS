     1                                  ; *************************************************************************
     2                                  ; * A Rock Paper Scissors Lizard Spock game in x86 64bit NASM by Dan Rhea *
     3                                  ; * following the rules created by by Sam Kass and Karen Bryla.           *
     4                                  ; *                                                                       *
     5                                  ; * rpsls.asm                                                             *
     6                                  ; *                                                                       *
     7                                  ; * Extended rules (beyond Rock, Paper Scissors)                          *
     8                                  ; * Spock smashes scissors and vaporizes rock                             *
     9                                  ; * Spock is poisoned by lizard and disproven by paper                    *
    10                                  ; * Lizard poisons Spock and eats paper                                   *
    11                                  ; * Lizard is crushed by rock and decapitated by scissors                 *
    12                                  ; *************************************************************************
    13                                  
    14                                  BITS 64
    15                                  
    16                                  section	.data
    17                                  
    18                                  ; ************************************************************************
    19                                  ; Constants
    20                                  ; ************************************************************************
    21                                  
    22                                  NOFLOAT	equ	0	; Non-floating point output for Printf (non-float)
    23                                  XITCMD	equ	60	; Exit opcode (syscall)
    24                                  WRITEC	equ	1	; Write syscall
    25                                  NORMAL	equ	0	; Normal exit flag
    26                                  STDOUT	equ	1	; Standard output
    27                                  ADLEN	equ	8	; Address length in bytes
    28                                  BLEN	equ	1	; Address length in bytes
    29                                  ONEW	equ	0x0000000000000001
    30                                  ONEB	equ	0x0001
    31                                  ZEROW	equ	0x0000000000000000
    32                                  ZEROB	equ	0x0000
    33                                  
    34                                  ; ************************************************************************
    35                                  ; Command strings (proxies)
    36                                  ; This contains the individual command strings, a byte list of proxy 
    37                                  ; numeric values and a list of addresses for the start of each null 
    38                                  ; terminated string.
    39                                  ; ************************************************************************
    40 00000000 726F636B00              	proxrck	db	"rock",0		; 0 
    41 00000005 706170657200            	proxpap	db	"paper",0		; 1
    42 0000000B 73636973736F727300      	proxsrs	db	"scissors",0		; 2
    43 00000014 6C697A61726400          	proxliz	db	"lizard",0		; 3
    44 0000001B 73706F636B00            	proxspk	db	"spock",0		; 4
    45                                  
    46 00000021 68656C7000              	phelp	db	"help",0		; 5 (help request)
    47 00000026 6C6963656E736500        	plice	db	"license",0		; 6 (license info... MIT)
    48 0000002E 73636F726500            	pscor	db	"score",0		; 7 (score request)
    49 00000034 646562756700            	pdbug	db	"debug",0		; 8 (debug mode)
    50 0000003A 7175697400              	pquit	db	"quit",0		; 9 (quit request)
    51                                  	pend 	equ	$			; list end address
    52                                  
    53 0000003F 000102030405060708-     	verbnum	db	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
    53 00000048 09                 
    54                                  
    55 00000049 [0000000000000000]-     	saddr	dq	$proxrck, $proxpap, $proxsrs, $proxliz, $proxspk
    55 00000051 [0500000000000000]-
    55 00000059 [0B00000000000000]-
    55 00000061 [1400000000000000]-
    55 00000069 [1B00000000000000] 
    56 00000071 [2100000000000000]-     		dq	$phelp, $plice, $pscor, $pdbug, $pquit, $pend
    56 00000079 [2600000000000000]-
    56 00000081 [2E00000000000000]-
    56 00000089 [3400000000000000]-
    56 00000091 [3A00000000000000]-
    56 00000099 [3F00000000000000] 
    57                                  
    58                                  ; ************************************************************************
    59                                  ; Action verb text
    60                                  ; This is a list of actions that describe a "combat" resolution (for
    61                                  ; example: rock vs paper, rock "is covered by" paper). 
    62                                  ; The following contains five groups of five strings that describe all the
    63                                  ; possible resolutions and a list of the start addres of each null
    64                                  ; terminated string.
    65                                  ;
    66                                  ; Lookup calculation: addr+(((PLAYERGUESS*5)+COMPGUESS)*ADLEN)
    67                                  ;		      verbadd+(((PLAYERGUESS*5)+COMPGUESS)*8)
    68                                  ; ************************************************************************
    69                                  ;			Rock
    70 000000A1 6D61746368657300        	rck_rck	db	"matches",0		; Rock (Computer select)
    71 000000A9 697320636F76657265-     	rck_pap	db	"is covered by",0	; Paper
    71 000000B2 6420627900         
    72 000000B7 736D617368657300        	rck_srs	db	"smashes",0		; Scissors
    73 000000BF 6372757368657300        	rck_liz	db	"crushes",0		; Lizard
    74 000000C7 6973207661706F7269-     	rck_spk	db	"is vaporized by",0	; Spock
    74 000000D0 7A656420627900     
    75                                  ;			Paper
    76 000000D7 636F7665727300          	pap_rck	db	"covers",0		; Rock
    77 000000DE 6D61746368657300        	pap_pap	db	"matches",0		; Paper
    78 000000E6 697320637574206279-     	pap_srs	db	"is cut by",0		; Scissors
    78 000000EF 00                 
    79 000000F0 697320656174656E20-     	pap_liz	db	"is eaten by",0		; Lizard
    79 000000F9 627900             
    80 000000FC 64697370726F766573-     	pap_spk	db	"disproves",0		; Spock
    80 00000105 00                 
    81                                  ;			Scissors
    82 00000106 6172652062726F6B65-     	srs_rck	db	"are broken by",0	; Rock
    82 0000010F 6E20627900         
    83 00000114 6375747300              	srs_pap	db	"cuts",0		; Paper
    84 00000119 6D61746368657300        	srs_srs	db	"matches",0		; Scissors
    85 00000121 646563617069746174-     	srs_liz	db	"decapitates",0		; Lizard
    85 0000012A 657300             
    86 0000012D 61726520736D617368-     	srs_spk	db	"are smashed by",0	; Spock
    86 00000136 656420627900       
    87                                  ;			Lizard
    88 0000013C 697320637275736865-     	liz_rck	db	"is crushed by",0	; Rock
    88 00000145 6420627900         
    89 0000014A 6561747300              	liz_pap db	"eats",0		; Paper
    90 0000014F 697320646563617069-     	liz_srs	db	"is decapitated by",0	; Scissors
    90 00000158 746174656420627900 
    91 00000161 6D61746368657300        	liz_liz	db	"matches",0		; Lizard
    92 00000169 706F69736F6E7300        	liz_spk	db	"poisons",0		; Spock
    93                                  ;			Spock
    94 00000171 7661706F72697A6573-     	spk_rck	db	"vaporizes",0		; Rock
    94 0000017A 00                 
    95 0000017B 69732064697370726F-     	spk_pap	db	"is disproved by",0	; Paper
    95 00000184 76656420627900     
    96 0000018B 736D617368657300        	spk_srs	db	"smashes",0		; Scissors
    97 00000193 697320706F69736F6E-     	spk_liz	db	"is poisoned by",0	; Lizard
    97 0000019C 656420627900       
    98 000001A2 6D61746368657300        	spk_spk	db	"matches",0		; Spock
    99                                  	;		End address
   100                                  	av_end	equ	$
   101                                  ; Array of verb addresses (proxy index * 5)
   102 000001AA [A100000000000000]-     	verbadd	dq	$rck_rck, $rck_pap, $rck_srs, $rck_liz, $rck_spk
   102 000001B2 [A900000000000000]-
   102 000001BA [B700000000000000]-
   102 000001C2 [BF00000000000000]-
   102 000001CA [C700000000000000] 
   103 000001D2 [D700000000000000]-     		dq	$pap_rck, $pap_pap, $pap_srs, $pap_liz, $pap_spk
   103 000001DA [DE00000000000000]-
   103 000001E2 [E600000000000000]-
   103 000001EA [F000000000000000]-
   103 000001F2 [FC00000000000000] 
   104 000001FA [0601000000000000]-     		dq	$srs_rck, $srs_pap, $srs_srs, $srs_liz,	$srs_spk
   104 00000202 [1401000000000000]-
   104 0000020A [1901000000000000]-
   104 00000212 [2101000000000000]-
   104 0000021A [2D01000000000000] 
   105 00000222 [3C01000000000000]-     		dq	$liz_rck, $liz_pap, $liz_srs, $liz_liz,	$liz_spk
   105 0000022A [4A01000000000000]-
   105 00000232 [4F01000000000000]-
   105 0000023A [6101000000000000]-
   105 00000242 [6901000000000000] 
   106 0000024A [7101000000000000]-     		dq	$spk_rck, $spk_pap, $spk_srs, $spk_liz, $spk_spk
   106 00000252 [7B01000000000000]-
   106 0000025A [8B01000000000000]-
   106 00000262 [9301000000000000]-
   106 0000026A [A201000000000000] 
   107 00000272 [AA01000000000000]      		dq	$av_end
   108                                  
   109                                  ; ************************************************************************
   110                                  ; Results map lookup table
   111                                  ; The following table is used to determine a win or loss condition for the
   112                                  ; player (1: player win, -1: Computer win, 0: Tie). The calculation to 
   113                                  ; lookup the action verb above is the same for a lookup into this table.
   114                                  ; Also included is the result text and starting address for each null
   115                                  ; terminated string. 
   116                                  ;
   117                                  ; Lookup calculation: resaddr+(((PLAYERGUESS*5)+COMPGUESS)*BLEN)
   118                                  ;		      outcome+(((PLAYERGUESS*5)+COMPGUESS)*1)
   119                                  ;*************************************************************************
   120                                  ;                        rck pap srs liz spk     byte int
   121 0000027A 00FF010101              	outcome	db	 0, -1,  1,  1,  1	; Rock
   122 0000027F 0100FFFF01              		db	 1,  0, -1, -1,  1	; Paper
   123 00000284 FF010001FF              		db	-1,  1,  0,  1, -1	; Scissors
   124 00000289 FF01FF0001              		db	-1,  1, -1,  0,  1	; Lizard
   125 0000028E 01FF01FF00              		db	 1, -1,  1, -1,  0	; Spock
   126                                  ;			1: Player win, -1: Computer win, 0: Tie
   127 00000293 506C61796572207769-     	playwin	db	"Player wins over computer!",0	; 1
   127 0000029C 6E73206F7665722063-
   127 000002A5 6F6D70757465722100 
   128 000002AE 506C61796572206C6F-     	compwin	db	"Player loses to computer!",0	; -1
   128 000002B7 73657320746F20636F-
   128 000002C0 6D70757465722100   
   129 000002C8 506C61796572207469-     	bothtie	db	"Player ties with computer!",0	; 0
   129 000002D1 657320776974682063-
   129 000002DA 6F6D70757465722100 
   130                                  	rsltend	equ	$
   131                                  ; Result addresss
   132 000002E3 [9302000000000000]-     	rsltadd	dq	$playwin, $compwin, $bothtie, $rsltend
   132 000002EB [AE02000000000000]-
   132 000002F3 [C802000000000000]-
   132 000002FB [E302000000000000] 
   133                                  
   134                                  ; ************************************************************************
   135                                  ; Score and "round" info
   136                                  ; ************************************************************************
   137 00000303 0000000000000000        	pscore	dq	0	; Player score
   138 0000030B 0000000000000000        	cscore	dq	0	; Computer score
   139 00000313 0000000000000000        	ties	dq	0	; Tie results
   140 0000031B 0000000000000000        	rounds	dq	0	; Round counter
   141 00000323 00                      	cmdnum	db	0	; Command number
   142                                  
   143                                  ; Flags
   144 00000324 0000000000000000        	debugf	dq	0	; 0: no debug, 1: debug
   145                                  
   146                                  ; Generic string
   147 0000032C 257300                  	sto	db	"%s",0
   148 0000032F 496E70757420737472-     	nlst	db	"Input string was: %s",10,0
   148 00000338 696E67207761733A20-
   148 00000341 25730A00           
   149                                  
   150                                  ; ************************************************************************
   151                                  ; Splash screen, help screen and prompt text  
   152                                  ; ************************************************************************
   153 00000345 5250534C532076312E-     	splashs	db	"RPSLS v1.0 a Rock, Paper, Scissors, Lizard, "
   153 0000034E 30206120526F636B2C-
   153 00000357 2050617065722C2053-
   153 00000360 636973736F72732C20-
   153 00000369 4C697A6172642C20   
   154 00000371 53706F636B2067616D-     		db	"Spock game by Dan Rhea, 2024",10
   154 0000037A 652062792044616E20-
   154 00000383 526865612C20323032-
   154 0000038C 340A               
   155 0000038E 61732064657369676E-     		db	"as designed by Sam Kass and Karen Bryla. "
   155 00000397 65642062792053616D-
   155 000003A0 204B61737320616E64-
   155 000003A9 204B6172656E204272-
   155 000003B2 796C612E20         
   156 000003B7 4C6963656E73656420-     		db	"Licensed under the MIT License.",10,10,0
   156 000003C0 756E64657220746865-
   156 000003C9 204D4954204C696365-
   156 000003D2 6E73652E0A0A00     
   157                                  ; Help
   158 000003D9 456E7465722027726F-     	helps	db	"Enter 'rock' 'paper' 'scissors' 'lizard' or "
   158 000003E2 636B27202770617065-
   158 000003EB 722720277363697373-
   158 000003F4 6F72732720276C697A-
   158 000003FD 61726427206F7220   
   159 00000405 2773706F636B272074-     		db	"'spock' to play a round or",10
   159 0000040E 6F20706C6179206120-
   159 00000417 726F756E64206F720A 
   160 00000420 74686520636F6D6D61-     		db	"the commands 'help' 'license' 'score' 'debug' "
   160 00000429 6E6473202768656C70-
   160 00000432 2720276C6963656E73-
   160 0000043B 6527202773636F7265-
   160 00000444 272027646562756727-
   160 0000044D 20                 
   161 0000044E 6F7220277175697427-     		db	"or 'quit'.",10,10,0
   161 00000457 2E0A0A00           
   162                                  ; Prompt
   163 0000045B 7270736C733A2000        	prompts	db	"rpsls: ",0
   164                                  	plen	equ	$-prompts
   165                                  ; Goodbye
   166 00000463 446F6E652120546861-     	bye	db	"Done! Thanks for playing.",10,0
   166 0000046C 6E6B7320666F722070-
   166 00000475 6C6179696E672E0A00 
   167                                  
   168 0000047E 537472696E673A2050-     	stest	db	"String: Player selected action verb:'%s'.",10,0
   168 00000487 6C617965722073656C-
   168 00000490 656374656420616374-
   168 00000499 696F6E20766572623A-
   168 000004A2 272573272E0A00     
   169                                  
   170                                  	CGUESS	equ	4
   171                                  	PGUESS	equ	1
   172                                  
   173 000004A9 0A                      	NL	db	0xa	; newline	
   174                                  	inlen	equ	32	; Max buffer length
   175                                  
   176                                  section	.bss
   177                                  
   178 00000000 <res 21h>               	inbuf	resb	inlen+1	; room for string and a null terminator
   179                                  
   180                                  section	.text
   181                                  
   182                                  extern	printf		; Use the c library printf procedure
   183                                  
   184                                  	global	main
   185                                  main:
   186 00000000 55                      	push	rbp		; prologue
   187 00000001 4889E5                  	mov	rbp, rsp
   188                                  
   189                                  	;mov	rax, NOFLOAT
   190                                  	;mov	rdi, stest
   191                                  	;mov	rsi, [verbadd+(((PGUESS*5)+CGUESS)*ADLEN)] 
   192                                  	;call	printf
   193                                  
   194                                  ; Show splash
   195                                  splash:
   196 00000004 B800000000              	mov	rax, NOFLOAT	; non-float output
   197 00000009 48BF-                   	mov	rdi, sto	; string format (%s)
   197 0000000B [2C03000000000000] 
   198 00000013 48BE-                   	mov	rsi, splashs	; text to output
   198 00000015 [4503000000000000] 
   199 0000001D E8(00000000)            	call	printf
   200                                  
   201                                  ; Show help (basic commands)
   202                                  help:
   203 00000022 B800000000              	mov	rax, NOFLOAT
   204 00000027 48BF-                   	mov	rdi, sto
   204 00000029 [2C03000000000000] 
   205 00000031 48BE-                   	mov	rsi, helps
   205 00000033 [D903000000000000] 
   206 0000003B E8(00000000)            	call	printf
   207                                  
   208                                  ; Show prompt
   209                                  prompt:
   210                                  ; Prompt doesn't seem to want to work with printf so I will try it with a
   211                                  ; stdout syscall... it worked!
   212 00000040 B801000000              	mov	rax, WRITEC	; Write
   213 00000045 BF01000000              	mov	rdi, STDOUT	; Standard out
   214 0000004A 48BE-                    	mov	rsi, prompts	; Player prompt
   214 0000004C [5B04000000000000] 
   215 00000054 BA08000000              	mov	rdx, plen	; Prompt length
   216 00000059 0F05                    	syscall
   217                                  
   218                                  ; Get input from player
   219 0000005B 48BF-                   	mov	rdi, inbuf	; Input buffer
   219 0000005D [0000000000000000] 
   220 00000065 BE20000000              	mov	rsi, inlen	; Buffer length
   221 0000006A E88A000000              	call	reads
   222                                  
   223                                  ; for now, echo input and exit
   224 0000006F B800000000              	mov	rax, NOFLOAT
   225 00000074 48BF-                   	mov	rdi, nlst
   225 00000076 [2F03000000000000] 
   226                                  ;	lea	rsi, [inbuf]	; Didn't help
   227 0000007E 48BE-                   	mov	rsi, inbuf
   227 00000080 [0000000000000000] 
   228 00000088 E8(00000000)            	call	printf
   229                                  
   230 0000008D EB3C                    	jmp	end		; For now
   231                                  
   232                                  ; Convert input to numeric offset (0-4, 5-9) (proxies and commands)
   233                                  ; Get random pick for computer
   234                                  ; Process commands if one is selected
   235                                  ;	5: Show help again (go to help)
   236                                  dohelp:
   237 0000008F EB91                    	jmp	help		; show help and reprompt
   238                                  
   239                                  ;	6: Show MIT license
   240                                  ; 	7: Show current score
   241                                  ;	8: Toggle debug (verbose info)
   242                                  debug:
   243 00000091 50                      	push	rax
   244 00000092 48B8-                   	mov	rax, debugf
   244 00000094 [2403000000000000] 
   245 0000009C 4883E001                	and	rax, 0x0000000000000001
   246 000000A0 740F                    	jz	seton
   247 000000A2 B800000000              	mov	rax, 0x0000000000000000
   248 000000A7 48890425[24030000]      	mov	[debugf], rax
   249 000000AF EB0D                    	jmp	setoff
   250                                  seton:
   251 000000B1 B801000000              	mov	rax, 0x0000000000000001
   252 000000B6 48890425[24030000]      	mov	[debugf], rax
   253                                  setoff:
   254 000000BE 58                      	pop	rax
   255 000000BF E97CFFFFFF              	jmp	prompt
   256                                  
   257                                  ;	9: Quit (show score and quit)
   258                                  quit:
   259                                  	; show score then exit
   260 000000C4 EB05                    	jmp	end
   261                                  ;	0-4: Determine outcome based on proxies
   262                                  ; update scores
   263                                  ; Output round resuts
   264                                  ; Update round
   265                                  ; Go to prompt
   266 000000C6 E975FFFFFF              	jmp	prompt		; reprompt
   267                                  
   268                                  end:
   269 000000CB B800000000              	mov	rax, NOFLOAT
   270 000000D0 48BF-                   	mov	rdi, sto
   270 000000D2 [2C03000000000000] 
   271 000000DA 48BE-                   	mov	rsi, bye
   271 000000DC [6304000000000000] 
   272 000000E4 E8(00000000)            	call	printf
   273                                  
   274 000000E9 4889EC                  	mov	rsp, rbp	; epilogue
   275 000000EC 5D                      	pop	rbp
   276                                  
   277 000000ED B83C000000              	mov	rax, XITCMD	; exit
   278 000000F2 BF00000000              	mov	rdi, NORMAL	; normal exit
   279 000000F7 0F05                    	syscall
   280                                  
   281                                  ; *********************************************************************
   282                                  ; * reads ("safe" string reader), from                                *
   283                                  ; * Beginning x64 Assembly Programming by Jo Van Hoey (Pages 163-165) * 
   284                                  ; * I have redone the comments to insure I understand what the        *
   285                                  ; * procedure does and how it works.                                  *
   286                                  ; *********************************************************************
   287                                  reads:
   288                                  
   289                                  section	.data
   290                                  
   291                                  section	.bss
   292                                  
   293 00000021 ??                      	.inputc	resb	1	; Single character
   294                                  
   295                                  section	.text
   296                                  
   297 000000F9 55                      	push	rbp
   298 000000FA 4889E5                  	mov	rbp, rsp
   299 000000FD 4154                    	push	r12		; save registers for argument use
   300 000000FF 4155                    	push	r13
   301 00000101 4156                    	push	r14
   302 00000103 4989FC                  	mov	r12, rdi	; Address of input buffer
   303 00000106 4989F5                  	mov	r13, rsi	; Max length to r13
   304 00000109 4D31F6                  	xor	r14, r14	; Character counter
   305                                  .readc:
   306 0000010C B800000000              	mov	rax, 0		; Read opcode
   307 00000111 BF01000000              	mov	rdi, 1		; Set stdin
   308 00000116 488D3425[21000000]      	lea	rsi, [.inputc]	; Input address
   309 0000011E BA01000000              	mov	rdx, 1		; characters to read
   310 00000123 0F05                    	syscall
   311 00000125 8A0425[21000000]        	mov	al, [.inputc]	; Input...
   312 0000012C 3A0425[A9040000]        	cmp	al, byte[NL]	; a newline?
   313 00000133 7419                    	je	.done		; end of input
   314 00000135 3C61                    	cmp	al, 97		; less than 'a'?
   315 00000137 7CD3                    	jl	.readc		; Yes, ignore it
   316 00000139 3C7A                    	cmp	al, 122		; Greater than 'z'?
   317 0000013B 7FCF                    	jg	.readc		; Yes, ignore as well
   318 0000013D 49FFC6                  	inc	r14		; Increment 'valid' input count
   319 00000140 4D39EE                  	cmp	r14, r13	; max input?
   320 00000143 77C7                    	ja	.readc		; Ignore stuff that would overflow the buffer
   321 00000145 41880424                	mov	byte [r12], al	; Save safe byte to buffer
   322 00000149 49FFC4                  	inc	r12		; point to next byte in buffer
   323 0000014C EBBE                    	jmp	.readc		; get next character
   324                                  .done:
   325 0000014E 49FFC4                  	inc	r12		; bump buffer pointer
   326 00000151 41C6042400              	mov	byte [r12], 0	; zero terminate the buffer
   327 00000156 415E                    	pop	r14		; restore registers
   328 00000158 415D                    	pop	r13
   329 0000015A 415C                    	pop	r12
   330 0000015C C9                      leave
   331 0000015D C3                      ret
   332                                  
