     1                                  ; *************************************************************************
     2                                  ; * A Rock Paper Scissors Lizard Spock game in x86 64bit NASM by Dan Rhea *
     3                                  ; * following the rules created by by Sam Kass and Karen Bryla.           *
     4                                  ; *                                                                       *
     5                                  ; * rpsls.asm                                                             *
     6                                  ; *                                                                       *
     7                                  ; * Extended rules (beyond Rock, Paper Scissors)                          *
     8                                  ; * Spock smashes scissors and vaporizes rock                             *
     9                                  ; * Spock is poisoned by lizard and disproven by paper                    *
    10                                  ; * Lizard poisons Spock and eats paper                                   *
    11                                  ; * Lizard is crushed by rock and decapitated by scissors                 *
    12                                  ; *************************************************************************
    13                                  
    14                                  BITS 64
    15                                  
    16                                  section	.data
    17                                  
    18                                  ; ************************************************************************
    19                                  ; Constants
    20                                  ; ************************************************************************
    21                                  
    22                                  NOFLOAT	equ	0	; Non-floating point output for Printf (non-float)
    23                                  XITCMD	equ	60	; Exit opcode (syscall)
    24                                  WRITEC	equ	1	; Write syscall
    25                                  NORMAL	equ	0	; Normal exit flag
    26                                  STDOUT	equ	1	; Standard output
    27                                  ADLEN	equ	8	; Address length in bytes
    28                                  BLEN	equ	1	; Address length in bytes
    29                                  ONE	equ	1	; One constant
    30                                  ZERO 	equ	0	; Zero constant
    31                                  
    32                                  ; ************************************************************************
    33                                  ; Command strings (proxies)
    34                                  ; This contains the individual command strings, a byte list of proxy 
    35                                  ; numeric values and a list of addresses for the start of each null 
    36                                  ; terminated string.
    37                                  ; ************************************************************************
    38 00000000 726F636B00              	proxrck	db	"rock",0		; 0 
    39 00000005 706170657200            	proxpap	db	"paper",0		; 1
    40 0000000B 73636973736F727300      	proxsrs	db	"scissors",0		; 2
    41 00000014 6C697A61726400          	proxliz	db	"lizard",0		; 3
    42 0000001B 73706F636B00            	proxspk	db	"spock",0		; 4
    43                                  
    44 00000021 68656C7000              	phelp	db	"help",0		; 5 (help request)
    45 00000026 6C6963656E736500        	plice	db	"license",0		; 6 (license info... MIT)
    46 0000002E 73636F726500            	pscor	db	"score",0		; 7 (score request)
    47 00000034 646562756700            	pdbug	db	"debug",0		; 8 (debug mode)
    48 0000003A 7175697400              	pquit	db	"quit",0		; 9 (quit request)
    49 0000003F 656E6400                	pend 	db	"end",0			; list end address
    50                                  
    51 00000043 000102030405060708-     	verbnum	db	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
    51 0000004C 09                 
    52                                  
    53 0000004D [0000000000000000]-     	saddr	dq	$proxrck, $proxpap, $proxsrs, $proxliz, $proxspk
    53 00000055 [0500000000000000]-
    53 0000005D [0B00000000000000]-
    53 00000065 [1400000000000000]-
    53 0000006D [1B00000000000000] 
    54 00000075 [2100000000000000]-     		dq	$phelp, $plice, $pscor, $pdbug, $pquit
    54 0000007D [2600000000000000]-
    54 00000085 [2E00000000000000]-
    54 0000008D [3400000000000000]-
    54 00000095 [3A00000000000000] 
    55 0000009D [3F00000000000000]      	eaddr	dq	$pend
    56                                  
    57                                  ; ************************************************************************
    58                                  ; Action verb text
    59                                  ; This is a list of actions that describe a "combat" resolution (for
    60                                  ; example: rock vs paper, rock "is covered by" paper). 
    61                                  ; The following contains five groups of five strings that describe all the
    62                                  ; possible resolutions and a list of the start addres of each null
    63                                  ; terminated string.
    64                                  ;
    65                                  ; Lookup calculation: addr+(((PLAYERGUESS*5)+COMPGUESS)*ADLEN)
    66                                  ;		      verbadd+(((PLAYERGUESS*5)+COMPGUESS)*8)
    67                                  ; ************************************************************************
    68                                  ;			Rock
    69 000000A5 6D61746368657300        	rck_rck	db	"matches",0		; Rock (Computer select)
    70 000000AD 697320636F76657265-     	rck_pap	db	"is covered by",0	; Paper
    70 000000B6 6420627900         
    71 000000BB 736D617368657300        	rck_srs	db	"smashes",0		; Scissors
    72 000000C3 6372757368657300        	rck_liz	db	"crushes",0		; Lizard
    73 000000CB 6973207661706F7269-     	rck_spk	db	"is vaporized by",0	; Spock
    73 000000D4 7A656420627900     
    74                                  ;			Paper
    75 000000DB 636F7665727300          	pap_rck	db	"covers",0		; Rock
    76 000000E2 6D61746368657300        	pap_pap	db	"matches",0		; Paper
    77 000000EA 697320637574206279-     	pap_srs	db	"is cut by",0		; Scissors
    77 000000F3 00                 
    78 000000F4 697320656174656E20-     	pap_liz	db	"is eaten by",0		; Lizard
    78 000000FD 627900             
    79 00000100 64697370726F766573-     	pap_spk	db	"disproves",0		; Spock
    79 00000109 00                 
    80                                  ;			Scissors
    81 0000010A 6172652062726F6B65-     	srs_rck	db	"are broken by",0	; Rock
    81 00000113 6E20627900         
    82 00000118 6375747300              	srs_pap	db	"cuts",0		; Paper
    83 0000011D 6D61746368657300        	srs_srs	db	"matches",0		; Scissors
    84 00000125 646563617069746174-     	srs_liz	db	"decapitates",0		; Lizard
    84 0000012E 657300             
    85 00000131 61726520736D617368-     	srs_spk	db	"are smashed by",0	; Spock
    85 0000013A 656420627900       
    86                                  ;			Lizard
    87 00000140 697320637275736865-     	liz_rck	db	"is crushed by",0	; Rock
    87 00000149 6420627900         
    88 0000014E 6561747300              	liz_pap db	"eats",0		; Paper
    89 00000153 697320646563617069-     	liz_srs	db	"is decapitated by",0	; Scissors
    89 0000015C 746174656420627900 
    90 00000165 6D61746368657300        	liz_liz	db	"matches",0		; Lizard
    91 0000016D 706F69736F6E7300        	liz_spk	db	"poisons",0		; Spock
    92                                  ;			Spock
    93 00000175 7661706F72697A6573-     	spk_rck	db	"vaporizes",0		; Rock
    93 0000017E 00                 
    94 0000017F 69732064697370726F-     	spk_pap	db	"is disproved by",0	; Paper
    94 00000188 76656420627900     
    95 0000018F 736D617368657300        	spk_srs	db	"smashes",0		; Scissors
    96 00000197 697320706F69736F6E-     	spk_liz	db	"is poisoned by",0	; Lizard
    96 000001A0 656420627900       
    97 000001A6 6D61746368657300        	spk_spk	db	"matches",0		; Spock
    98                                  	;		End address
    99                                  	av_end	equ	$
   100                                  ; Array of verb addresses (proxy index * 5)
   101 000001AE [A500000000000000]-     	verbadd	dq	$rck_rck, $rck_pap, $rck_srs, $rck_liz, $rck_spk
   101 000001B6 [AD00000000000000]-
   101 000001BE [BB00000000000000]-
   101 000001C6 [C300000000000000]-
   101 000001CE [CB00000000000000] 
   102 000001D6 [DB00000000000000]-     		dq	$pap_rck, $pap_pap, $pap_srs, $pap_liz, $pap_spk
   102 000001DE [E200000000000000]-
   102 000001E6 [EA00000000000000]-
   102 000001EE [F400000000000000]-
   102 000001F6 [0001000000000000] 
   103 000001FE [0A01000000000000]-     		dq	$srs_rck, $srs_pap, $srs_srs, $srs_liz,	$srs_spk
   103 00000206 [1801000000000000]-
   103 0000020E [1D01000000000000]-
   103 00000216 [2501000000000000]-
   103 0000021E [3101000000000000] 
   104 00000226 [4001000000000000]-     		dq	$liz_rck, $liz_pap, $liz_srs, $liz_liz,	$liz_spk
   104 0000022E [4E01000000000000]-
   104 00000236 [5301000000000000]-
   104 0000023E [6501000000000000]-
   104 00000246 [6D01000000000000] 
   105 0000024E [7501000000000000]-     		dq	$spk_rck, $spk_pap, $spk_srs, $spk_liz, $spk_spk
   105 00000256 [7F01000000000000]-
   105 0000025E [8F01000000000000]-
   105 00000266 [9701000000000000]-
   105 0000026E [A601000000000000] 
   106 00000276 [AE01000000000000]      		dq	$av_end
   107                                  
   108                                  ; ************************************************************************
   109                                  ; Results map lookup table
   110                                  ; The following table is used to determine a win or loss condition for the
   111                                  ; player (1: player win, -1: Computer win, 0: Tie). The calculation to 
   112                                  ; lookup the action verb above is the same for a lookup into this table.
   113                                  ; Also included is the result text and starting address for each null
   114                                  ; terminated string. 
   115                                  ;
   116                                  ; Lookup calculation: resaddr+(((PLAYERGUESS*5)+COMPGUESS)*BLEN)
   117                                  ;		      outcome+(((PLAYERGUESS*5)+COMPGUESS)*1)
   118                                  ;*************************************************************************
   119                                  ;                        rck pap srs liz spk     byte int
   120 0000027E 00FF010101              	outcome	db	 0, -1,  1,  1,  1	; Rock
   121 00000283 0100FFFF01              		db	 1,  0, -1, -1,  1	; Paper
   122 00000288 FF010001FF              		db	-1,  1,  0,  1, -1	; Scissors
   123 0000028D FF01FF0001              		db	-1,  1, -1,  0,  1	; Lizard
   124 00000292 01FF01FF00              		db	 1, -1,  1, -1,  0	; Spock
   125                                  ;			1: Player win, -1: Computer win, 0: Tie
   126 00000297 506C61796572207769-     	playwin	db	"Player wins over computer!",0	; 1
   126 000002A0 6E73206F7665722063-
   126 000002A9 6F6D70757465722100 
   127 000002B2 506C61796572206C6F-     	compwin	db	"Player loses to computer!",0	; -1
   127 000002BB 73657320746F20636F-
   127 000002C4 6D70757465722100   
   128 000002CC 506C61796572207469-     	bothtie	db	"Player ties with computer!",0	; 0
   128 000002D5 657320776974682063-
   128 000002DE 6F6D70757465722100 
   129                                  	rsltend	equ	$
   130                                  ; Result addresss
   131 000002E7 [9702000000000000]-     	rsltadd	dq	$playwin, $compwin, $bothtie, $rsltend
   131 000002EF [B202000000000000]-
   131 000002F7 [CC02000000000000]-
   131 000002FF [E702000000000000] 
   132                                  
   133                                  ; ************************************************************************
   134                                  ; Score and "round" info
   135                                  ; ************************************************************************
   136 00000307 0000000000000000        	pscore	dq	0	; Player score
   137 0000030F 0000000000000000        	cscore	dq	0	; Computer score
   138 00000317 0000000000000000        	ties	dq	0	; Tie results
   139 0000031F 0000000000000000        	rounds	dq	0	; Round counter
   140 00000327 00                      	cmdnum	db	0	; Command number
   141                                  
   142                                  ; Flags
   143 00000328 0000000000000000        	debugf	dq	0	; 0: no debug, 1: debug
   144                                  
   145                                  ; Generic string
   146 00000330 257300                  	sto	db	"%s",0
   147 00000333 1B5B313B33326D          	stonl	db	0x1b,"[1;32m"
   148 0000033A 25730A00                		db	"%s",10,0
   149 0000033E 1B5B313B33346D          	nlst	db	0x1b,"[1;34m"
   150 00000345 496E70757420737472-     		db	"Input string was: "
   150 0000034E 696E67207761733A20 
   151 00000357 1B5B313B33376D2573-     		db	0x1b,"[1;37m","%s",10,0
   151 00000360 0A00               
   152                                  
   153                                  					; VT escape code: 
   154 00000362 1B5B313B33376D          	ltWhite	db	0x1b,"[1;37m"	; Light white
   155 00000369 1B5B313B33336D          	ltYellow db	0x1b,"[1;33m" 	; Light yellow
   156 00000370 1B5B313B33346D          	ltBlue	db	0x1b,"[1;34m"	; Light blue
   157 00000377 1B5B313B33326D          	ltGreen	db	0x1b,"[1;32m"	; Light green
   158 0000037E 1B5B303B33316D          	red 	db	0x1b,"[0;31m"	; Red
   159                                  
   160                                  ; ************************************************************************
   161                                  ; Splash screen, help screen and prompt text  
   162                                  ; ************************************************************************
   163 00000385 1B5B313B33346D          	splashs	db	0x1b,"[1;34m" 
   164 0000038C 5250534C532076312E-     		db	"RPSLS v1.0 a Rock, Paper, Scissors, Lizard, "
   164 00000395 30206120526F636B2C-
   164 0000039E 2050617065722C2053-
   164 000003A7 636973736F72732C20-
   164 000003B0 4C697A6172642C20   
   165 000003B8 53706F636B2067616D-     		db	"Spock game by Dan Rhea, 2024",10
   165 000003C1 652062792044616E20-
   165 000003CA 526865612C20323032-
   165 000003D3 340A               
   166 000003D5 61732064657369676E-     		db	"as designed by Sam Kass and Karen Bryla. "
   166 000003DE 65642062792053616D-
   166 000003E7 204B61737320616E64-
   166 000003F0 204B6172656E204272-
   166 000003F9 796C612E20         
   167 000003FE 4C6963656E73656420-     		db	"Licensed under the MIT License.",10,10,0
   167 00000407 756E64657220746865-
   167 00000410 204D4954204C696365-
   167 00000419 6E73652E0A0A00     
   168                                  ; Help
   169 00000420 1B5B313B33346D          	helps	db	0x1b,"[1;34m"
   170 00000427 456E7465722027726F-     		db	"Enter 'rock' 'paper' 'scissors' 'lizard' or "
   170 00000430 636B27202770617065-
   170 00000439 722720277363697373-
   170 00000442 6F72732720276C697A-
   170 0000044B 61726427206F7220   
   171 00000453 2773706F636B272074-     		db	"'spock' to play a round or",10
   171 0000045C 6F20706C6179206120-
   171 00000465 726F756E64206F720A 
   172 0000046E 74686520636F6D6D61-     		db	"the commands 'help' 'license' 'score' 'debug' "
   172 00000477 6E6473202768656C70-
   172 00000480 2720276C6963656E73-
   172 00000489 6527202773636F7265-
   172 00000492 272027646562756727-
   172 0000049B 20                 
   173 0000049C 6F7220277175697427-     		db	"or 'quit'.",10,10,0
   173 000004A5 2E0A0A00           
   174                                  ; Prompt
   175 000004A9 1B5B313B33336D          	prompts	db	0x1b,"[1;33m"
   176 000004B0 7270736C733A20          		db	"rpsls: "
   177 000004B7 1B5B313B33376D          		db	0x1b,"[1;37m"
   178                                  	plen	equ	$-prompts
   179                                  ; Goodbye
   180 000004BE 1B5B313B33376D          	bye	db	0x1b,"[1;37m"
   181 000004C5 446F6E652120546861-     		db	"Done! Thanks for playing.",10,0
   181 000004CE 6E6B7320666F722070-
   181 000004D7 6C6179696E672E0A00 
   182                                  
   183 000004E0 537472696E673A2050-     	stest	db	"String: Player selected action verb:'%s'.",10,0
   183 000004E9 6C617965722073656C-
   183 000004F2 656374656420616374-
   183 000004FB 696F6E20766572623A-
   183 00000504 272573272E0A00     
   184                                  
   185                                  	CGUESS	equ	4
   186                                  	PGUESS	equ	1
   187                                  
   188 0000050B 0A                      	NL	db	0xa	; newline	
   189                                  	inlen	equ	32	; Max buffer length
   190                                  
   191                                  section	.bss
   192                                  
   193 00000000 <res 21h>               	inbuf	resb	inlen+1	; room for string and a null terminator
   194                                  
   195                                  section	.text
   196                                  
   197                                  extern	printf		; Use the c library printf procedure
   198                                  
   199                                  	global	main
   200                                  main:
   201 00000000 55                      	push	rbp		; prologue
   202 00000001 4889E5                  	mov	rbp, rsp
   203                                  
   204                                  	;mov	rax, NOFLOAT
   205                                  	;mov	rdi, stest
   206                                  	;mov	rsi, [verbadd+(((PGUESS*5)+CGUESS)*ADLEN)] 
   207                                  	;call	printf
   208                                  
   209                                  ; Show splash
   210                                  splash:
   211 00000004 B800000000              	mov	rax, NOFLOAT	; non-float output
   212 00000009 48BF-                   	mov	rdi, sto	; string format (%s)
   212 0000000B [3003000000000000] 
   213 00000013 48BE-                   	mov	rsi, splashs	; text to output
   213 00000015 [8503000000000000] 
   214 0000001D E8(00000000)            	call	printf
   215                                  
   216                                  ; Show help (basic commands)
   217                                  help:
   218 00000022 B800000000              	mov	rax, NOFLOAT
   219 00000027 48BF-                   	mov	rdi, sto
   219 00000029 [3003000000000000] 
   220 00000031 48BE-                   	mov	rsi, helps
   220 00000033 [2004000000000000] 
   221 0000003B E8(00000000)            	call	printf
   222                                  
   223                                  ; Show prompt
   224                                  prompt:
   225 00000040 B801000000              	mov	rax, WRITEC	; Write
   226 00000045 BF01000000              	mov	rdi, STDOUT	; Standard out
   227 0000004A 48BE-                    	mov	rsi, prompts	; Player prompt
   227 0000004C [A904000000000000] 
   228 00000054 BA15000000              	mov	rdx, plen	; Prompt length
   229 00000059 0F05                    	syscall
   230                                  
   231                                  ; Get input from player
   232 0000005B 48BF-                   	mov	rdi, inbuf	; Input buffer
   232 0000005D [0000000000000000] 
   233 00000065 BE20000000              	mov	rsi, inlen	; Buffer length
   234 0000006A E8B5000000              	call	reads
   235                                  
   236                                  ; for now, echo input and exit
   237 0000006F B800000000              	mov	rax, NOFLOAT
   238 00000074 48BF-                   	mov	rdi, nlst
   238 00000076 [3E03000000000000] 
   239 0000007E 48BE-                   	mov	rsi, inbuf
   239 00000080 [0000000000000000] 
   240 00000088 E8(00000000)            	call	printf
   241                                  
   242                                  ; Convert input to numeric offset (0-4, 5-9) (proxies and commands)
   243                                  
   244                                  ; This starts with traversing the command address table (starts
   245                                  ; at saddr). 
   246                                  ; For now just output the strings the addresses point to.
   247 0000008D 48BA-                   	mov	rdx, saddr	; Address of command address table
   247 0000008F [4D00000000000000] 
   248 00000097 B800000000              shocmd:	mov	rax, NOFLOAT	; Ascii'ish data
   249 0000009C 48BF-                   	mov	rdi, stonl	; Output format
   249 0000009E [3303000000000000] 
   250 000000A6 488B32                  	mov	rsi, [rdx]	; Command string
   251 000000A9 52                      	push	rdx		; Save rdx contents
   252 000000AA E8(00000000)            	call	printf		; Output the string
   253 000000AF 5A                      	pop	rdx		; Restore rdx
   254 000000B0 4883C208                	add	rdx, ADLEN	; Bump to the next 64bit address
   255 000000B4 4881FA[9D000000]        	cmp	rdx, eaddr	; This the end of the address table?
   256 000000BB 7402                    	je	endit		; Yes, finish
   257 000000BD EBD8                    	jmp	shocmd		; No, get the next command string
   258 000000BF EB35                    endit:	jmp	end		; For now
   259                                  
   260                                  ; Get random pick for computer
   261                                  ; Process commands if one is selected
   262                                  ;	5: Show help again (go to help)
   263                                  dohelp:
   264 000000C1 E95CFFFFFF              	jmp	help		; show help and reprompt
   265                                  
   266                                  ;	6: Show MIT license
   267                                  ; 	7: Show current score
   268                                  ;	8: Toggle debug (verbose info)
   269                                  debug:
   270 000000C6 50                      	push	rax		; Save the rax register
   271 000000C7 488B0425[28030000]      	mov	rax, [debugf]	; Get the current debug flag setting
   272 000000CF 4883F801                	cmp 	rax, ONE	; Is it a one
   273 000000D3 7407                    	jz	seton		; No, go toggle on
   274 000000D5 B800000000              	mov	rax, ZERO	; Yes, toggle off
   275 000000DA EB05                    	jmp	skipon		; Branch past the on toggle
   276                                  seton:
   277 000000DC B801000000              	mov	rax, ONE	; Set toggle to on
   278                                  skipon:
   279 000000E1 48890425[28030000]      	mov	[debugf], rax	; Save new toggle value
   280 000000E9 58                      	pop	rax		; Restore the rax register
   281 000000EA E951FFFFFF              	jmp	prompt		; reprompt
   282                                  
   283                                  ;	9: Quit (show score and quit)
   284                                  quit:
   285                                  	; show score then exit
   286 000000EF EB05                    	jmp	end
   287                                  ;	0-4: Determine outcome based on proxies
   288                                  ; update scores
   289                                  ; Output round resuts
   290                                  ; Update round
   291                                  ; Go to prompt
   292 000000F1 E94AFFFFFF              	jmp	prompt		; reprompt
   293                                  
   294                                  end:
   295 000000F6 B800000000              	mov	rax, NOFLOAT
   296 000000FB 48BF-                   	mov	rdi, sto
   296 000000FD [3003000000000000] 
   297 00000105 48BE-                   	mov	rsi, bye
   297 00000107 [BE04000000000000] 
   298 0000010F E8(00000000)            	call	printf
   299                                  
   300 00000114 4889EC                  	mov	rsp, rbp	; epilogue
   301 00000117 5D                      	pop	rbp
   302                                  
   303 00000118 B83C000000              	mov	rax, XITCMD	; exit
   304 0000011D BF00000000              	mov	rdi, NORMAL	; normal exit
   305 00000122 0F05                    	syscall
   306                                  
   307                                  ; *********************************************************************
   308                                  ; * reads ("safe" string reader), from                                *
   309                                  ; * Beginning x64 Assembly Programming by Jo Van Hoey (Pages 163-165) * 
   310                                  ; * I have redone the comments to insure I understand what the        *
   311                                  ; * procedure does and how it works.                                  *
   312                                  ; *********************************************************************
   313                                  reads:
   314                                  
   315                                  section	.data
   316                                  
   317                                  section	.bss
   318                                  
   319 00000021 ??                      	.inputc	resb	1	; Single character
   320                                  
   321                                  section	.text
   322                                  
   323 00000124 55                      	push	rbp
   324 00000125 4889E5                  	mov	rbp, rsp
   325 00000128 4154                    	push	r12		; save registers for argument use
   326 0000012A 4155                    	push	r13
   327 0000012C 4156                    	push	r14
   328 0000012E 4989FC                  	mov	r12, rdi	; Address of input buffer
   329 00000131 4989F5                  	mov	r13, rsi	; Max length to r13
   330 00000134 4D31F6                  	xor	r14, r14	; Character counter
   331                                  .readc:
   332 00000137 B800000000              	mov	rax, 0		; Read opcode
   333 0000013C BF01000000              	mov	rdi, 1		; Set stdin
   334 00000141 488D3425[21000000]      	lea	rsi, [.inputc]	; Input address
   335 00000149 BA01000000              	mov	rdx, 1		; characters to read
   336 0000014E 0F05                    	syscall
   337 00000150 8A0425[21000000]        	mov	al, [.inputc]	; Input...
   338 00000157 3A0425[0B050000]        	cmp	al, byte[NL]	; a newline?
   339 0000015E 7419                    	je	.done		; end of input
   340 00000160 3C61                    	cmp	al, 97		; less than 'a'?
   341 00000162 7CD3                    	jl	.readc		; Yes, ignore it
   342 00000164 3C7A                    	cmp	al, 122		; Greater than 'z'?
   343 00000166 7FCF                    	jg	.readc		; Yes, ignore as well
   344 00000168 49FFC6                  	inc	r14		; Increment 'valid' input count
   345 0000016B 4D39EE                  	cmp	r14, r13	; max input?
   346 0000016E 77C7                    	ja	.readc		; Ignore stuff that would overflow the buffer
   347 00000170 41880424                	mov	byte [r12], al	; Save safe byte to buffer
   348 00000174 49FFC4                  	inc	r12		; point to next byte in buffer
   349 00000177 EBBE                    	jmp	.readc		; get next character
   350                                  .done:
   351 00000179 49FFC4                  	inc	r12		; bump buffer pointer
   352 0000017C 41C6042400              	mov	byte [r12], 0	; zero terminate the buffer
   353 00000181 415E                    	pop	r14		; restore registers
   354 00000183 415D                    	pop	r13
   355 00000185 415C                    	pop	r12
   356 00000187 C9                      leave
   357 00000188 C3                      ret
   358                                  
