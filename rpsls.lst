     1                                  ; *************************************************************************
     2                                  ; * A Rock Paper Scissors Lizard Spock game in x86 64bit NASM by Dan Rhea *
     3                                  ; * following the rules created by by Sam Kass and Karen Bryla.           *
     4                                  ; *                                                                       *
     5                                  ; * rpsls.asm                                                             *
     6                                  ; *                                                                       *
     7                                  ; * Extended rules (beyond Rock, Paper Scissors)                          *
     8                                  ; * Spock smashes scissors and vaporizes rock                             *
     9                                  ; * Spock is poisoned by lizard and disproven by paper                    *
    10                                  ; * Lizard poisons Spock and eats paper                                   *
    11                                  ; * Lizard is crushed by rock and decapitated by scissors                 *
    12                                  ; *************************************************************************
    13                                  
    14                                  BITS 64
    15                                  
    16                                  section	.data
    17                                  
    18                                  NOFLOAT	equ	0	; Non-floating point output for Printf (non-float)
    19                                  XITCMD	equ	60	; Exit opcode (syscall)
    20                                  WRITEC	equ	1	; Write syscall
    21                                  NORMAL	equ	0	; Normal exit flag
    22                                  STDOUT	equ	1	; Standard output
    23                                  ADLEN	equ	8	; Address length in bytes
    24                                  ONEW	equ	0x0000000000000001
    25                                  ONEB	equ	0x0001
    26                                  ZEROW	equ	0x0000000000000000
    27                                  ZEROB	equ	0x0000
    28                                  
    29                                  ; Character proxies (input strings) and commands
    30 00000000 726F636B00              	proxrck	db	"rock",0		; 0 
    31 00000005 706170657200            	proxpap	db	"paper",0		; 1
    32 0000000B 73636973736F727300      	proxsrs	db	"scissors",0		; 2
    33 00000014 6C697A61726400          	proxliz	db	"lizard",0		; 3
    34 0000001B 73706F636B00            	proxspk	db	"spock",0		; 4
    35                                  
    36 00000021 68656C7000              	phelp	db	"help",0		; 5 (help request)
    37 00000026 6C6963656E736500        	plice	db	"license",0		; 6 (license info... MIT)
    38 0000002E 73636F726500            	pscor	db	"score",0		; 7 (score request)
    39 00000034 646562756700            	pdbug	db	"debug",0		; 8 (debug mode)
    40 0000003A 7175697400              	pquit	db	"quit",0		; 9 (quit request)
    41                                  
    42 0000003F 000102030405060708-     	verbnum	db	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
    42 00000048 09                 
    43                                  
    44                                  ; Input address array
    45 00000049 [0000000000000000]-     	saddr	dq	$proxrck, $proxpap, $proxsrs, $proxliz, $proxspk
    45 00000051 [0500000000000000]-
    45 00000059 [0B00000000000000]-
    45 00000061 [1400000000000000]-
    45 00000069 [1B00000000000000] 
    46 00000071 [2100000000000000]-     		dq	$phelp, $plice, $pscor, $pdbug, $pquit
    46 00000079 [2600000000000000]-
    46 00000081 [2E00000000000000]-
    46 00000089 [3400000000000000]-
    46 00000091 [3A00000000000000] 
    47                                  
    48                                  ; Action verb text	Rock (player select)
    49 00000099 6D61746368657300        	rck_rck	db	"matches",0		; Rock (Computer select)
    50 000000A1 697320636F76657265-     	rck_pap	db	"is covered by",0	; Paper
    50 000000AA 6420627900         
    51 000000AF 736D617368657300        	rck_srs	db	"smashes",0		; Scissors
    52 000000B7 6372757368657300        	rck_liz	db	"crushes",0		; Lizard
    53 000000BF 6973207661706F7269-     	rck_spk	db	"is vaporized by",0	; Spock
    53 000000C8 7A656420627900     
    54                                  ;			Paper
    55 000000CF 636F7665727300          	pap_rck	db	"covers",0		; Rock
    56 000000D6 6D61746368657300        	pap_pap	db	"matches",0		; Paper
    57 000000DE 697320637574206279-     	pap_srs	db	"is cut by",0		; Scissors
    57 000000E7 00                 
    58 000000E8 697320656174656E20-     	pap_liz	db	"is eaten by",0		; Lizard
    58 000000F1 627900             
    59 000000F4 64697370726F766573-     	pap_spk	db	"disproves",0		; Spock
    59 000000FD 00                 
    60                                  ;			Scissors
    61 000000FE 6172652062726F6B65-     	srs_rck	db	"are broken by",0	; Rock
    61 00000107 6E20627900         
    62 0000010C 6375747300              	srs_pap	db	"cuts",0		; Paper
    63 00000111 6D61746368657300        	srs_srs	db	"matches",0		; Scissors
    64 00000119 646563617069746174-     	srs_liz	db	"decapitates",0		; Lizard
    64 00000122 657300             
    65 00000125 61726520736D617368-     	srs_spk	db	"are smashed by",0	; Spock
    65 0000012E 656420627900       
    66                                  ;			Lizard
    67 00000134 697320637275736865-     	liz_rck	db	"is crushed by",0	; Rock
    67 0000013D 6420627900         
    68 00000142 6561747300              	liz_pap db	"eats",0		; Paper
    69 00000147 697320646563617069-     	liz_srs	db	"is decapitated by",0	; Scissors
    69 00000150 746174656420627900 
    70 00000159 6D61746368657300        	liz_liz	db	"matches",0		; Lizard
    71 00000161 706F69736F6E7300        	liz_spk	db	"poisons",0		; Spock
    72                                  ;			Spock
    73 00000169 7661706F72697A6573-     	spk_rck	db	"vaporizes",0		; Rock
    73 00000172 00                 
    74 00000173 69732064697370726F-     	spk_pap	db	"is disproved by",0	; Paper
    74 0000017C 76656420627900     
    75 00000183 736D617368657300        	spk_srs	db	"smashes",0		; Scissors
    76 0000018B 697320706F69736F6E-     	spk_liz	db	"is poisoned by",0	; Lizard
    76 00000194 656420627900       
    77 0000019A 6D61746368657300        	spk_spk	db	"matches",0		; Spock
    78                                  
    79                                  ; Array of verb addresses (proxy index * 5)
    80 000001A2 [9900000000000000]-     	verbadd	dq	$rck_rck, $rck_pap, $rck_srs, $rck_liz, $rck_spk
    80 000001AA [A100000000000000]-
    80 000001B2 [AF00000000000000]-
    80 000001BA [B700000000000000]-
    80 000001C2 [BF00000000000000] 
    81 000001CA [CF00000000000000]-     		dq	$pap_rck, $pap_pap, $pap_srs, $pap_liz, $pap_spk
    81 000001D2 [D600000000000000]-
    81 000001DA [DE00000000000000]-
    81 000001E2 [E800000000000000]-
    81 000001EA [F400000000000000] 
    82 000001F2 [FE00000000000000]-     		dq	$srs_rck, $srs_pap, $srs_srs, $srs_liz,	$srs_spk
    82 000001FA [0C01000000000000]-
    82 00000202 [1101000000000000]-
    82 0000020A [1901000000000000]-
    82 00000212 [2501000000000000] 
    83 0000021A [3401000000000000]-     		dq	$liz_rck, $liz_pap, $liz_srs, $liz_liz,	$liz_spk
    83 00000222 [4201000000000000]-
    83 0000022A [4701000000000000]-
    83 00000232 [5901000000000000]-
    83 0000023A [6101000000000000] 
    84 00000242 [6901000000000000]-     		dq	$spk_rck, $spk_pap, $spk_srs, $spk_liz, $spk_spk
    84 0000024A [7301000000000000]-
    84 00000252 [8301000000000000]-
    84 0000025A [8B01000000000000]-
    84 00000262 [9A01000000000000] 
    85                                  	
    86                                  ; Results map           rck pap srs liz spk     byte int
    87 0000026A 00FF010101              	outcome	db	 0, -1,  1,  1,  1	; Rock
    88 0000026F 0100FFFF01              		db	 1,  0, -1, -1,  1	; Paper
    89 00000274 FF010001FF              		db	-1,  1,  0,  1, -1	; Scissors
    90 00000279 FF01FF0001              		db	-1,  1, -1,  0,  1	; Lizard
    91 0000027E 01FF01FF00              		db	 1, -1,  1, -1,  0	; Spock
    92                                  ;			1: Player win, -1: Computer win, 0: Tie
    93                                  
    94 00000283 506C61796572206C6F-     	playwin	db	"Player loses to computer!",0	; -1
    94 0000028C 73657320746F20636F-
    94 00000295 6D70757465722100   
    95 0000029D 506C61796572207769-     	compwin	db	"Player wins over computer!",0	; 1
    95 000002A6 6E73206F7665722063-
    95 000002AF 6F6D70757465722100 
    96 000002B8 506C61796572207469-     	bothtie	db	"Player ties with computer!",0	; 0
    96 000002C1 657320776974682063-
    96 000002CA 6F6D70757465722100 
    97                                  
    98                                  ; Result addresss
    99 000002D3 [8302000000000000]-     	rsltadd	dq	$playwin, $compwin, $bothtie
    99 000002DB [9D02000000000000]-
    99 000002E3 [B802000000000000] 
   100                                  
   101                                  ; Score
   102 000002EB 0000000000000000        	pscore	dq	0	; Player score
   103 000002F3 0000000000000000        	cscore	dq	0	; Computer score
   104 000002FB 0000000000000000        	ties	dq	0	; Tie results
   105 00000303 0000000000000000        	rounds	dq	0	; Round counter
   106                                  
   107                                  ; Flags
   108 0000030B 0000000000000000        	debugf	dq	0	; 0: no debug, 1: debug
   109                                  
   110                                  ; Generic string
   111 00000313 257300                  	sto	db	"%s",0
   112 00000316 5C6E25735C6E00          	nlst	db	"\n%s\n",0
   113                                  
   114                                  ; Splash screen
   115 0000031D 5250534C532076312E-     	splashs	db	"RPSLS v1.0 a Rock, Paper, Scissors, Lizard, Spock game by Dan Rhea, 2024",10
   115 00000326 30206120526F636B2C-
   115 0000032F 2050617065722C2053-
   115 00000338 636973736F72732C20-
   115 00000341 4C697A6172642C2053-
   115 0000034A 706F636B2067616D65-
   115 00000353 2062792044616E2052-
   115 0000035C 6865612C2032303234-
   115 00000365 0A                 
   116 00000366 61732064657369676E-     		db	"as designed by Sam Kass and Karen Bryla. Licensed under the MIT License.",10,10,0
   116 0000036F 65642062792053616D-
   116 00000378 204B61737320616E64-
   116 00000381 204B6172656E204272-
   116 0000038A 796C612E204C696365-
   116 00000393 6E73656420756E6465-
   116 0000039C 7220746865204D4954-
   116 000003A5 204C6963656E73652E-
   116 000003AE 0A0A00             
   117                                  
   118                                  ; Help
   119 000003B1 456E7465722027726F-     	helps	db	"Enter 'rock' 'paper' 'scissors' 'lizard' or 'spock' to play a round or",10
   119 000003BA 636B27202770617065-
   119 000003C3 722720277363697373-
   119 000003CC 6F72732720276C697A-
   119 000003D5 61726427206F722027-
   119 000003DE 73706F636B2720746F-
   119 000003E7 20706C617920612072-
   119 000003F0 6F756E64206F720A   
   120 000003F8 74686520636F6D6D61-     		db	"the commands 'help' 'license' 'score' 'debug' or 'quit'.",10,10,0
   120 00000401 6E6473202768656C70-
   120 0000040A 2720276C6963656E73-
   120 00000413 6527202773636F7265-
   120 0000041C 272027646562756727-
   120 00000425 206F72202771756974-
   120 0000042E 272E0A0A00         
   121                                  
   122                                  ; Prompt
   123 00000433 7270736C733A2000        	prompts	db	"rpsls: ",0
   124                                  	plen	equ	$-prompts
   125                                  
   126 0000043B 537472696E673A2050-     	stest	db	"String: Player selected action verb:'%s'.",10,0
   126 00000444 6C617965722073656C-
   126 0000044D 656374656420616374-
   126 00000456 696F6E20766572623A-
   126 0000045F 272573272E0A00     
   127                                  
   128                                  	CGUESS	equ	4
   129                                  	PGUESS	equ	1
   130                                  
   131 00000466 0A                      	NL	db	0xa	; newline
   132                                  	inlen	equ	32	; Max buffer length
   133                                  
   134                                  section	.bss
   135                                  
   136 00000000 <res 21h>               	input	resb	inlen+1	; add room for string and a null terminator
   137                                  
   138                                  section	.text
   139                                  
   140                                  extern	printf		; We will be using the c library printf procedure
   141                                  
   142                                  	global	main
   143                                  main:
   144 00000000 55                      	push	rbp		; prologue
   145 00000001 4889E5                  	mov	rbp, rsp
   146                                  
   147                                  	;mov	rax, NOFLOAT
   148                                  	;mov	rdi, stest
   149                                  	;mov	rsi, [verbadd+((PGUESS*5)+CGUESS)*ADLEN] 
   150                                  	;call	printf
   151                                  
   152                                  ; Show splash
   153                                  splash:
   154 00000004 B800000000              	mov	rax, NOFLOAT	; non-float output
   155 00000009 48BF-                   	mov	rdi, sto	; string format (%s)
   155 0000000B [1303000000000000] 
   156 00000013 48BE-                   	mov	rsi, splashs	; text to output
   156 00000015 [1D03000000000000] 
   157 0000001D E8(00000000)            	call	printf
   158                                  
   159                                  ; Show help (basic commands)
   160                                  help:
   161 00000022 B800000000              	mov	rax, NOFLOAT
   162 00000027 48BF-                   	mov	rdi, sto
   162 00000029 [1303000000000000] 
   163 00000031 48BE-                   	mov	rsi, helps
   163 00000033 [B103000000000000] 
   164 0000003B E8(00000000)            	call	printf
   165                                  
   166                                  ; Show prompt
   167                                  prompt:
   168                                  ; Prompt doesn't seem to want to work with printf so I will try it with a
   169                                  ; stdout syscall... it worked!
   170 00000040 B801000000              	mov	rax, WRITEC	; Write
   171 00000045 BF01000000              	mov	rdi, STDOUT	; Standard out
   172 0000004A 48BE-                    	mov	rsi, prompts	; Player prompt
   172 0000004C [3304000000000000] 
   173 00000054 BA08000000              	mov	rdx, plen	; Prompt length
   174 00000059 0F05                    	syscall
   175                                  
   176                                  ; Get input from player
   177 0000005B 48BF-                   	mov	rdi, input	; Input buffer
   177 0000005D [0000000000000000] 
   178 00000065 BE20000000              	mov	rsi, inlen	; Buffer length
   179 0000006A E86C000000              	call	reads
   180                                  
   181                                  ; for now, echo input and exit
   182 0000006F B800000000              	mov	rax, NOFLOAT
   183 00000074 48BF-                   	mov	rdi, nlst
   183 00000076 [1603000000000000] 
   184 0000007E 48BE-                   	mov	rsi, input
   184 00000080 [0000000000000000] 
   185 00000088 E8(00000000)            	call	printf
   186                                  
   187 0000008D EB3C                    	jmp	end		; For now
   188                                  
   189                                  ; Convert input to numeric offset (0-4, 5-9) (proxies and commands)
   190                                  ; Get random pick for computer
   191                                  ; Process commands if one is selected
   192                                  ;	5: Show help again (go to help)
   193                                  dohelp:
   194 0000008F EB91                    	jmp	help		; show help and reprompt
   195                                  
   196                                  ;	6: Show MIT license
   197                                  ; 	7: Show current score
   198                                  ;	8: Toggle debug (verbose info)
   199                                  debug:
   200 00000091 50                      	push	rax
   201 00000092 48B8-                   	mov	rax, debugf
   201 00000094 [0B03000000000000] 
   202 0000009C 4883E001                	and	rax, 0x0000000000000001
   203 000000A0 740F                    	jz	seton
   204 000000A2 B800000000              	mov	rax, 0x0000000000000000
   205 000000A7 48890425[0B030000]      	mov	[debugf], rax
   206 000000AF EB0D                    	jmp	setoff
   207                                  seton:
   208 000000B1 B801000000              	mov	rax, 0x0000000000000001
   209 000000B6 48890425[0B030000]      	mov	[debugf], rax
   210                                  setoff:
   211 000000BE 58                      	pop	rax
   212 000000BF E97CFFFFFF              	jmp	prompt
   213                                  
   214                                  ;	9: Quit (show score and quit)
   215                                  quit:
   216                                  	; show score then exit
   217 000000C4 EB05                    	jmp	end
   218                                  ;	0-4: Determine outcome based on proxies
   219                                  ; update scores
   220                                  ; Output round resuts
   221                                  ; Update round
   222                                  ; Go to prompt
   223 000000C6 E975FFFFFF              	jmp	prompt		; reprompt
   224                                  
   225                                  end:
   226 000000CB 4889EC                  	mov	rsp, rbp	; epilogue
   227 000000CE 5D                      	pop	rbp
   228                                  
   229 000000CF B83C000000              	mov	rax, XITCMD	; exit
   230 000000D4 BF00000000              	mov	rdi, NORMAL	; normal exit
   231 000000D9 0F05                    	syscall
   232                                  
   233                                  ; ---------------------------------------------------------------------
   234                                  ; reads ("safe" string reader), from
   235                                  ; Beginning x64 Assembly Programming by Jo Van Hoey (Pages 163-165)  
   236                                  ; ---------------------------------------------------------------------
   237                                  reads:
   238                                  section	.data
   239                                  section	.bss
   240 00000021 ??                      	.inputc	resb	1
   241                                  section	.text
   242 000000DB 55                      	push	rbp
   243 000000DC 4889E5                  	mov	rbp, rsp
   244 000000DF 4154                    	push	r12		; save registers for argument use
   245 000000E1 4155                    	push	r13
   246 000000E3 4156                    	push	r14
   247 000000E5 4989FC                  	mov	r12, rdi	; Address of input buffer
   248 000000E8 4989F5                  	mov	r13, rsi	; Max length to r13
   249 000000EB 4D89F6                  	mov	r14, r14	; Character counter
   250                                  .readc:
   251 000000EE B800000000              	mov	rax, 0		; Read opcode
   252 000000F3 BF01000000              	mov	rdi, 1		; Set stdin
   253 000000F8 488D3425[21000000]      	lea	rsi, [.inputc]	; Input address
   254 00000100 BA01000000              	mov	rdx, 1		; characters to read
   255 00000105 0F05                    	syscall
   256 00000107 8A0425[21000000]        	mov	al, [.inputc]	; Input...
   257 0000010E 3A0425[66040000]        	cmp	al, byte[NL]	; a newline?
   258 00000115 7419                    	je	.done		; end of input
   259 00000117 3C61                    	cmp	al, 97		; less than 'a'?
   260 00000119 7CD3                    	jl	.readc		; Yes, ignore it
   261 0000011B 3C7A                    	cmp	al, 122		; Greater than 'z'?
   262 0000011D 7FCF                    	jg	.readc		; Yes, ignore as well
   263 0000011F 49FFC6                  	inc	r14		; Increment 'valid' input count
   264 00000122 4D39EE                  	cmp	r14, r13	; max input?
   265 00000125 77C7                    	ja	.readc		; Ignore stuff that would overflow the buffer
   266 00000127 41880424                	mov	byte [r12], al	; Save safe byte to buffer
   267 0000012B 49FFC4                  	inc	r12		; point to next byte in buffer
   268 0000012E EBBE                    	jmp	.readc		; get next character
   269                                  .done:
   270 00000130 49FFC4                  	inc	r12		; bump buffer pointer
   271 00000133 41C6042400              	mov	byte [r12], 0	; zero terminate the buffer
   272 00000138 415E                    	pop	r14		; restore registers
   273 0000013A 415D                    	pop	r13
   274 0000013C 415C                    	pop	r12
   275 0000013E C9                      leave
   276 0000013F C3                      ret
   277                                  
