     1                                  ; *************************************************************************
     2                                  ; * A Rock Paper Scissors Lizard Spock game in x86 64bit NASM by Dan Rhea *
     3                                  ; * following the rules created by by Sam Kass and Karen Bryla.           *
     4                                  ; *                                                                       *
     5                                  ; * rpsls.asm                                                             *
     6                                  ; *                                                                       *
     7                                  ; * Extended rules (beyond Rock, Paper Scissors)                          *
     8                                  ; * Spock smashes scissors and vaporizes rock                             *
     9                                  ; * Spock is poisoned by lizard and disproven by paper                    *
    10                                  ; * Lizard poisons Spock and eats paper                                   *
    11                                  ; * Lizard is crushed by rock and decapitated by scissors                 *
    12                                  ; *************************************************************************
    13                                  
    14                                  BITS 64
    15                                  
    16                                  section	.data
    17                                  
    18                                  ; ************************************************************************
    19                                  ; Constants
    20                                  ; ************************************************************************
    21                                  
    22                                  NOFLOAT	equ	0	; Non-floating point output for Printf (non-float)
    23                                  XITCMD	equ	60	; Exit opcode (syscall)
    24                                  WRITEC	equ	1	; Write syscall
    25                                  NORMAL	equ	0	; Normal exit flag
    26                                  STDOUT	equ	1	; Standard output
    27                                  ADLEN	equ	8	; Address length in bytes
    28                                  BLEN	equ	1	; Address length in bytes
    29                                  ONE	equ	1	; One constant
    30                                  ZERO 	equ	0	; Zero constant
    31                                  
    32                                  ; ************************************************************************
    33                                  ; Command strings (proxies)
    34                                  ; This contains the individual command strings, a byte list of proxy 
    35                                  ; numeric values and a list of addresses for the start of each null 
    36                                  ; terminated string.
    37                                  ; ************************************************************************
    38 00000000 726F636B00              	proxrck	db	"rock",0		; 0 
    39 00000005 706170657200            	proxpap	db	"paper",0		; 1
    40 0000000B 73636973736F727300      	proxsrs	db	"scissors",0		; 2
    41 00000014 6C697A61726400          	proxliz	db	"lizard",0		; 3
    42 0000001B 73706F636B00            	proxspk	db	"spock",0		; 4
    43                                  
    44 00000021 68656C7000              	phelp	db	"help",0		; 5 (help request)
    45 00000026 6C6963656E736500        	plice	db	"license",0		; 6 (license info... MIT)
    46 0000002E 73636F726500            	pscor	db	"score",0		; 7 (score request)
    47 00000034 646562756700            	pdbug	db	"debug",0		; 8 (debug mode)
    48 0000003A 7175697400              	pquit	db	"quit",0		; 9 (quit request)
    49 0000003F 656E6400                	pend 	db	"end",0			; list end address
    50                                  
    51 00000043 000102030405060708-     	verbnum	db	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
    51 0000004C 09                 
    52                                  
    53 0000004D [0000000000000000]-     	saddr	dq	$proxrck, $proxpap, $proxsrs, $proxliz, $proxspk
    53 00000055 [0500000000000000]-
    53 0000005D [0B00000000000000]-
    53 00000065 [1400000000000000]-
    53 0000006D [1B00000000000000] 
    54 00000075 [2100000000000000]-     		dq	$phelp, $plice, $pscor, $pdbug, $pquit
    54 0000007D [2600000000000000]-
    54 00000085 [2E00000000000000]-
    54 0000008D [3400000000000000]-
    54 00000095 [3A00000000000000] 
    55 0000009D [3F00000000000000]      	eaddr	dq	$pend
    56                                  
    57                                  ; ************************************************************************
    58                                  ; Action verb text
    59                                  ; This is a list of actions that describe a "combat" resolution (for
    60                                  ; example: rock vs paper, rock "is covered by" paper). 
    61                                  ; The following contains five groups of five strings that describe all the
    62                                  ; possible resolutions and a list of the start addres of each null
    63                                  ; terminated string.
    64                                  ;
    65                                  ; Lookup calculation: addr+(((PLAYERGUESS*5)+COMPGUESS)*ADLEN)
    66                                  ;		      verbadd+(((PLAYERGUESS*5)+COMPGUESS)*8)
    67                                  ; ************************************************************************
    68                                  ;			Rock
    69 000000A5 6D61746368657300        	rck_rck	db	"matches",0		; Rock (Computer select)
    70 000000AD 697320636F76657265-     	rck_pap	db	"is covered by",0	; Paper
    70 000000B6 6420627900         
    71 000000BB 736D617368657300        	rck_srs	db	"smashes",0		; Scissors
    72 000000C3 6372757368657300        	rck_liz	db	"crushes",0		; Lizard
    73 000000CB 6973207661706F7269-     	rck_spk	db	"is vaporized by",0	; Spock
    73 000000D4 7A656420627900     
    74                                  ;			Paper
    75 000000DB 636F7665727300          	pap_rck	db	"covers",0		; Rock
    76 000000E2 6D61746368657300        	pap_pap	db	"matches",0		; Paper
    77 000000EA 697320637574206279-     	pap_srs	db	"is cut by",0		; Scissors
    77 000000F3 00                 
    78 000000F4 697320656174656E20-     	pap_liz	db	"is eaten by",0		; Lizard
    78 000000FD 627900             
    79 00000100 64697370726F766573-     	pap_spk	db	"disproves",0		; Spock
    79 00000109 00                 
    80                                  ;			Scissors
    81 0000010A 6172652062726F6B65-     	srs_rck	db	"are broken by",0	; Rock
    81 00000113 6E20627900         
    82 00000118 6375747300              	srs_pap	db	"cuts",0		; Paper
    83 0000011D 6D61746368657300        	srs_srs	db	"matches",0		; Scissors
    84 00000125 646563617069746174-     	srs_liz	db	"decapitates",0		; Lizard
    84 0000012E 657300             
    85 00000131 61726520736D617368-     	srs_spk	db	"are smashed by",0	; Spock
    85 0000013A 656420627900       
    86                                  ;			Lizard
    87 00000140 697320637275736865-     	liz_rck	db	"is crushed by",0	; Rock
    87 00000149 6420627900         
    88 0000014E 6561747300              	liz_pap db	"eats",0		; Paper
    89 00000153 697320646563617069-     	liz_srs	db	"is decapitated by",0	; Scissors
    89 0000015C 746174656420627900 
    90 00000165 6D61746368657300        	liz_liz	db	"matches",0		; Lizard
    91 0000016D 706F69736F6E7300        	liz_spk	db	"poisons",0		; Spock
    92                                  ;			Spock
    93 00000175 7661706F72697A6573-     	spk_rck	db	"vaporizes",0		; Rock
    93 0000017E 00                 
    94 0000017F 69732064697370726F-     	spk_pap	db	"is disproved by",0	; Paper
    94 00000188 76656420627900     
    95 0000018F 736D617368657300        	spk_srs	db	"smashes",0		; Scissors
    96 00000197 697320706F69736F6E-     	spk_liz	db	"is poisoned by",0	; Lizard
    96 000001A0 656420627900       
    97 000001A6 6D61746368657300        	spk_spk	db	"matches",0		; Spock
    98                                  	;		End address
    99                                  	av_end	equ	$
   100                                  ; Array of verb addresses (proxy index * 5)
   101 000001AE [A500000000000000]-     	verbadd	dq	$rck_rck, $rck_pap, $rck_srs, $rck_liz, $rck_spk
   101 000001B6 [AD00000000000000]-
   101 000001BE [BB00000000000000]-
   101 000001C6 [C300000000000000]-
   101 000001CE [CB00000000000000] 
   102 000001D6 [DB00000000000000]-     		dq	$pap_rck, $pap_pap, $pap_srs, $pap_liz, $pap_spk
   102 000001DE [E200000000000000]-
   102 000001E6 [EA00000000000000]-
   102 000001EE [F400000000000000]-
   102 000001F6 [0001000000000000] 
   103 000001FE [0A01000000000000]-     		dq	$srs_rck, $srs_pap, $srs_srs, $srs_liz,	$srs_spk
   103 00000206 [1801000000000000]-
   103 0000020E [1D01000000000000]-
   103 00000216 [2501000000000000]-
   103 0000021E [3101000000000000] 
   104 00000226 [4001000000000000]-     		dq	$liz_rck, $liz_pap, $liz_srs, $liz_liz,	$liz_spk
   104 0000022E [4E01000000000000]-
   104 00000236 [5301000000000000]-
   104 0000023E [6501000000000000]-
   104 00000246 [6D01000000000000] 
   105 0000024E [7501000000000000]-     		dq	$spk_rck, $spk_pap, $spk_srs, $spk_liz, $spk_spk
   105 00000256 [7F01000000000000]-
   105 0000025E [8F01000000000000]-
   105 00000266 [9701000000000000]-
   105 0000026E [A601000000000000] 
   106 00000276 [AE01000000000000]      		dq	$av_end
   107                                  
   108                                  ; ************************************************************************
   109                                  ; Results map lookup table
   110                                  ; The following table is used to determine a win or loss condition for the
   111                                  ; player (1: player win, -1: Computer win, 0: Tie). The calculation to 
   112                                  ; lookup the action verb above is the same for a lookup into this table.
   113                                  ; Also included is the result text and starting address for each null
   114                                  ; terminated string. 
   115                                  ;
   116                                  ; Lookup calculation: resaddr+(((PLAYERGUESS*5)+COMPGUESS)*BLEN)
   117                                  ;		      outcome+(((PLAYERGUESS*5)+COMPGUESS)*1)
   118                                  ;*************************************************************************
   119                                  ;                        rck pap srs liz spk     byte int
   120 0000027E 00FF010101              	outcome	db	 0, -1,  1,  1,  1	; Rock
   121 00000283 0100FFFF01              		db	 1,  0, -1, -1,  1	; Paper
   122 00000288 FF010001FF              		db	-1,  1,  0,  1, -1	; Scissors
   123 0000028D FF01FF0001              		db	-1,  1, -1,  0,  1	; Lizard
   124 00000292 01FF01FF00              		db	 1, -1,  1, -1,  0	; Spock
   125                                  ;			1: Player win, -1: Computer win, 0: Tie
   126 00000297 506C61796572207769-     	playwin	db	"Player wins over computer!",0	; 1
   126 000002A0 6E73206F7665722063-
   126 000002A9 6F6D70757465722100 
   127 000002B2 506C61796572206C6F-     	compwin	db	"Player loses to computer!",0	; -1
   127 000002BB 73657320746F20636F-
   127 000002C4 6D70757465722100   
   128 000002CC 506C61796572207469-     	bothtie	db	"Player ties with computer!",0	; 0
   128 000002D5 657320776974682063-
   128 000002DE 6F6D70757465722100 
   129                                  	rsltend	equ	$
   130                                  ; Result addresss
   131 000002E7 [9702000000000000]-     	rsltadd	dq	$playwin, $compwin, $bothtie, $rsltend
   131 000002EF [B202000000000000]-
   131 000002F7 [CC02000000000000]-
   131 000002FF [E702000000000000] 
   132                                  
   133                                  ; ************************************************************************
   134                                  ; Score and "round" info
   135                                  ; ************************************************************************
   136 00000307 0000000000000000        	pscore	dq	0	; Player score
   137 0000030F 0000000000000000        	cscore	dq	0	; Computer score
   138 00000317 0000000000000000        	ties	dq	0	; Tie results
   139 0000031F 0000000000000000        	rounds	dq	0	; Round counter
   140 00000327 0000000000000000        	rando	dq	0	; Computer selection 1-5
   141 0000032F 00                      	cmdnum	db	0	; Command number
   142                                  
   143                                  ; Flags
   144 00000330 0000000000000000        	debugf	dq	0	; 0: no debug, 1: debug
   145                                  
   146                                  ; Generic string
   147 00000338 257300                  	sto	db	"%s",0
   148 0000033B 1B5B313B33326D          	stonl	db	0x1b,"[1;32m"
   149 00000342 25730A00                		db	"%s",10,0
   150 00000346 1B5B313B33346D          	nlst	db	0x1b,"[1;34m"
   151 0000034D 496E70757420737472-     		db	"Input string was: "
   151 00000356 696E67207761733A20 
   152 0000035F 1B5B313B33376D2573-     		db	0x1b,"[1;37m","%s",10,0
   152 00000368 0A00               
   153                                  
   154                                  					; VT escape code: 
   155 0000036A 1B5B313B33376D          	ltWhite	db	0x1b,"[1;37m"	; Light white
   156 00000371 1B5B313B33336D          	ltYellow db	0x1b,"[1;33m" 	; Light yellow
   157 00000378 1B5B313B33346D          	ltBlue	db	0x1b,"[1;34m"	; Light blue
   158 0000037F 1B5B313B33326D          	ltGreen	db	0x1b,"[1;32m"	; Light green
   159 00000386 1B5B303B33316D          	red 	db	0x1b,"[0;31m"	; Red
   160                                  
   161                                  ; ************************************************************************
   162                                  ; Splash screen, help screen and prompt text  
   163                                  ; ************************************************************************
   164 0000038D 1B5B313B33346D          	splashs	db	0x1b,"[1;34m" 
   165 00000394 5250534C532076312E-     		db	"RPSLS v1.0 a Rock, Paper, Scissors, Lizard, "
   165 0000039D 30206120526F636B2C-
   165 000003A6 2050617065722C2053-
   165 000003AF 636973736F72732C20-
   165 000003B8 4C697A6172642C20   
   166 000003C0 53706F636B2067616D-     		db	"Spock game by Dan Rhea, 2024",10
   166 000003C9 652062792044616E20-
   166 000003D2 526865612C20323032-
   166 000003DB 340A               
   167 000003DD 61732064657369676E-     		db	"as designed by Sam Kass and Karen Bryla. "
   167 000003E6 65642062792053616D-
   167 000003EF 204B61737320616E64-
   167 000003F8 204B6172656E204272-
   167 00000401 796C612E20         
   168 00000406 4C6963656E73656420-     		db	"Licensed under the MIT License.",10,10,0
   168 0000040F 756E64657220746865-
   168 00000418 204D4954204C696365-
   168 00000421 6E73652E0A0A00     
   169                                  ; Help
   170 00000428 1B5B313B33346D          	helps	db	0x1b,"[1;34m"
   171 0000042F 456E7465722027726F-     		db	"Enter 'rock' 'paper' 'scissors' 'lizard' or "
   171 00000438 636B27202770617065-
   171 00000441 722720277363697373-
   171 0000044A 6F72732720276C697A-
   171 00000453 61726427206F7220   
   172 0000045B 2773706F636B272074-     		db	"'spock' to play a round or",10
   172 00000464 6F20706C6179206120-
   172 0000046D 726F756E64206F720A 
   173 00000476 74686520636F6D6D61-     		db	"the commands 'help' 'license' 'score' 'debug' "
   173 0000047F 6E6473202768656C70-
   173 00000488 2720276C6963656E73-
   173 00000491 6527202773636F7265-
   173 0000049A 272027646562756727-
   173 000004A3 20                 
   174 000004A4 6F7220277175697427-     		db	"or 'quit'.",10,10,0
   174 000004AD 2E0A0A00           
   175                                  ; Prompt
   176 000004B1 1B5B313B33336D          	prompts	db	0x1b,"[1;33m"
   177 000004B8 7270736C733A20          		db	"rpsls: "
   178 000004BF 1B5B313B33376D          		db	0x1b,"[1;37m"
   179                                  	plen	equ	$-prompts
   180                                  ; Goodbye
   181 000004C6 1B5B313B33376D          	bye	db	0x1b,"[1;37m"
   182 000004CD 446F6E652120546861-     		db	"Done! Thanks for playing.",10,0
   182 000004D6 6E6B7320666F722070-
   182 000004DF 6C6179696E672E0A00 
   183                                  
   184 000004E8 537472696E673A2050-     	stest	db	"String: Player selected action verb:'%s'.",10,0
   184 000004F1 6C617965722073656C-
   184 000004FA 656374656420616374-
   184 00000503 696F6E20766572623A-
   184 0000050C 272573272E0A00     
   185                                  
   186                                  	CGUESS	equ	4
   187                                  	PGUESS	equ	1
   188                                  
   189 00000513 0A                      	NL	db	0xa	; newline	
   190                                  	inlen	equ	32	; Max buffer length
   191                                  
   192                                  section	.bss
   193                                  
   194 00000000 <res 21h>               	inbuf	resb	inlen+1	; room for string and a null terminator
   195                                  
   196                                  section	.text
   197                                  
   198                                  extern	printf		; Use the c library printf procedure
   199                                  extern	rand 		; C random procedure
   200                                  extern	srand		; C init random procedure
   201                                  extern	time 		; C init time procedure
   202                                  
   203                                  	global	main
   204                                  main:
   205 00000000 55                      	push	rbp		; prologue
   206 00000001 4889E5                  	mov	rbp, rsp
   207                                  
   208 00000004 B800000000              	mov	rax, ZERO	; Init debug toggle off
   209 00000009 48890425[30030000]      	mov	[debugf], rax	; Save it
   210                                  
   211                                  	;mov	rax, NOFLOAT
   212                                  	;mov	rdi, stest
   213                                  	;mov	rsi, [verbadd+(((PGUESS*5)+CGUESS)*ADLEN)] 
   214                                  	;call	printf
   215                                  
   216                                  ; Show splash
   217                                  splash:
   218 00000011 B800000000              	mov	rax, NOFLOAT	; non-float output
   219 00000016 48BF-                   	mov	rdi, sto	; string format (%s)
   219 00000018 [3803000000000000] 
   220 00000020 48BE-                   	mov	rsi, splashs	; text to output
   220 00000022 [8D03000000000000] 
   221 0000002A E8(00000000)            	call	printf
   222                                  
   223                                  ; Show help (basic commands)
   224                                  help:
   225 0000002F B800000000              	mov	rax, NOFLOAT
   226 00000034 48BF-                   	mov	rdi, sto
   226 00000036 [3803000000000000] 
   227 0000003E 48BE-                   	mov	rsi, helps
   227 00000040 [2804000000000000] 
   228 00000048 E8(00000000)            	call	printf
   229                                  
   230                                  ; Show prompt
   231                                  prompt:
   232 0000004D B801000000              	mov	rax, WRITEC	; Write
   233 00000052 BF01000000              	mov	rdi, STDOUT	; Standard out
   234 00000057 48BE-                    	mov	rsi, prompts	; Player prompt
   234 00000059 [B104000000000000] 
   235 00000061 BA15000000              	mov	rdx, plen	; Prompt length
   236 00000066 0F05                    	syscall
   237                                  
   238                                  ; Get input from player
   239 00000068 48BF-                   	mov	rdi, inbuf	; Input buffer
   239 0000006A [0000000000000000] 
   240 00000072 BE20000000              	mov	rsi, inlen	; Buffer length
   241 00000077 E8B5000000              	call	reads
   242                                  
   243                                  ; for now, echo input and exit
   244 0000007C B800000000              	mov	rax, NOFLOAT
   245 00000081 48BF-                   	mov	rdi, nlst
   245 00000083 [4603000000000000] 
   246 0000008B 48BE-                   	mov	rsi, inbuf
   246 0000008D [0000000000000000] 
   247 00000095 E8(00000000)            	call	printf
   248                                  
   249                                  ; Convert input to numeric offset (0-4, 5-9) (proxies and commands)
   250                                  
   251                                  ; This starts with traversing the command address table (starts
   252                                  ; at saddr). 
   253                                  ; For now just output the strings the addresses point to.
   254 0000009A 48BA-                   	mov	rdx, saddr	; Address of command address table
   254 0000009C [4D00000000000000] 
   255 000000A4 B800000000              shocmd:	mov	rax, NOFLOAT	; Ascii'ish data
   256 000000A9 48BF-                   	mov	rdi, stonl	; Output format
   256 000000AB [3B03000000000000] 
   257 000000B3 488B32                  	mov	rsi, [rdx]	; Command string
   258 000000B6 52                      	push	rdx		; Save rdx contents
   259 000000B7 E8(00000000)            	call	printf		; Output the string
   260 000000BC 5A                      	pop	rdx		; Restore rdx
   261 000000BD 4883C208                	add	rdx, ADLEN	; Bump to the next 64bit address
   262 000000C1 4881FA[9D000000]        	cmp	rdx, eaddr	; This the end of the address table?
   263 000000C8 7402                    	je	endit		; Yes, finish
   264 000000CA EBD8                    	jmp	shocmd		; No, get the next command string
   265 000000CC EB35                    endit:	jmp	end		; For now
   266                                  
   267                                  ; Get random pick for computer
   268                                  ; Process commands if one is selected
   269                                  ;	5: Show help again (go to help)
   270                                  dohelp:
   271 000000CE E95CFFFFFF              	jmp	help		; show help and reprompt
   272                                  
   273                                  ;	6: Show MIT license
   274                                  ; 	7: Show current score
   275                                  ;	8: Toggle debug (verbose info)
   276                                  debug:
   277 000000D3 50                      	push	rax		; Save the rax register
   278 000000D4 488B0425[30030000]      	mov	rax, [debugf]	; Get the current debug flag setting
   279 000000DC 4883F801                	cmp 	rax, ONE	; Is it a one
   280 000000E0 7407                    	jz	skipoff		; No, go toggle on
   281 000000E2 B800000000              	mov	rax, ZERO	; Yes, set toggle off
   282 000000E7 EB05                    	jmp	savetg		; skip toggle on
   283                                  skipoff:
   284 000000E9 B801000000              	mov	rax, ONE	; Set toggle on
   285                                  savetg:	
   286 000000EE 48890425[30030000]      	mov	[debugf], rax	; Save new toggle value
   287 000000F6 58                      	pop	rax		; Restore the rax register
   288 000000F7 E951FFFFFF              	jmp	prompt		; reprompt
   289                                  
   290                                  ;	9: Quit (show score and quit)
   291                                  quit:
   292                                  	; show score then exit
   293 000000FC EB05                    	jmp	end
   294                                  ;	0-4: Determine outcome based on proxies
   295                                  ; update scores
   296                                  ; Output round resuts
   297                                  ; Update round
   298                                  ; Go to prompt
   299 000000FE E94AFFFFFF              	jmp	prompt		; reprompt
   300                                  
   301                                  end:
   302 00000103 B800000000              	mov	rax, NOFLOAT
   303 00000108 48BF-                   	mov	rdi, sto
   303 0000010A [3803000000000000] 
   304 00000112 48BE-                   	mov	rsi, bye
   304 00000114 [C604000000000000] 
   305 0000011C E8(00000000)            	call	printf
   306                                  
   307 00000121 4889EC                  	mov	rsp, rbp	; epilogue
   308 00000124 5D                      	pop	rbp
   309                                  
   310 00000125 B83C000000              	mov	rax, XITCMD	; exit
   311 0000012A BF00000000              	mov	rdi, NORMAL	; normal exit
   312 0000012F 0F05                    	syscall
   313                                  
   314                                  ; *********************************************************************
   315                                  ; * reads ("safe" string reader), from                                *
   316                                  ; * Beginning x64 Assembly Programming by Jo Van Hoey (Pages 163-165) * 
   317                                  ; * I have redone the comments to insure I understand what the        *
   318                                  ; * procedure does and how it works.                                  *
   319                                  ; *********************************************************************
   320                                  reads:
   321                                  
   322                                  section	.data
   323                                  
   324                                  section	.bss
   325                                  
   326 00000021 ??                      	.inputc	resb	1	; Single character
   327                                  
   328                                  section	.text
   329                                  
   330 00000131 55                      	push	rbp		; Save the program counter
   331 00000132 4889E5                  	mov	rbp, rsp	; Move the stack pointer to the program counter
   332 00000135 4154                    	push	r12		; save registers for argument use
   333 00000137 4155                    	push	r13
   334 00000139 4156                    	push	r14
   335 0000013B 4989FC                  	mov	r12, rdi	; Address of input buffer
   336 0000013E 4989F5                  	mov	r13, rsi	; Max length to r13
   337 00000141 4D31F6                  	xor	r14, r14	; Character counter
   338                                  .readc:
   339 00000144 B800000000              	mov	rax, 0		; Read opcode
   340 00000149 BF01000000              	mov	rdi, 1		; Set stdin
   341 0000014E 488D3425[21000000]      	lea	rsi, [.inputc]	; Input address
   342 00000156 BA01000000              	mov	rdx, 1		; characters to read
   343 0000015B 0F05                    	syscall
   344 0000015D 8A0425[21000000]        	mov	al, [.inputc]	; Input...
   345 00000164 3A0425[13050000]        	cmp	al, byte[NL]	; a newline?
   346 0000016B 7419                    	je	.done		; end of input
   347 0000016D 3C61                    	cmp	al, 97		; less than 'a'?
   348 0000016F 7CD3                    	jl	.readc		; Yes, ignore it
   349 00000171 3C7A                    	cmp	al, 122		; Greater than 'z'?
   350 00000173 7FCF                    	jg	.readc		; Yes, ignore as well
   351 00000175 49FFC6                  	inc	r14		; Increment 'valid' input count
   352 00000178 4D39EE                  	cmp	r14, r13	; max input?
   353 0000017B 77C7                    	ja	.readc		; Ignore stuff that would overflow the buffer
   354 0000017D 41880424                	mov	byte [r12], al	; Save safe byte to buffer
   355 00000181 49FFC4                  	inc	r12		; point to next byte in buffer
   356 00000184 EBBE                    	jmp	.readc		; get next character
   357                                  .done:
   358 00000186 49FFC4                  	inc	r12		; bump buffer pointer
   359 00000189 41C6042400              	mov	byte [r12], 0	; zero terminate the buffer
   360 0000018E 415E                    	pop	r14		; restore registers
   361 00000190 415D                    	pop	r13
   362 00000192 415C                    	pop	r12
   363 00000194 C9                      leave
   364 00000195 C3                      ret
   365                                  
   366                                  ; *********************************************************************
   367                                  ; Get a random number of 1 to 5
   368                                  ; *********************************************************************
   369                                  getrand:
   370                                  
   371                                  section .data	
   372                                  
   373                                  section	.bss
   374                                  
   375                                  section	.text
   376                                  
   377 00000196 55                      	push	rbp		; Save the program counter
   378 00000197 4889E5                  	mov	rbp, rsp	; Move the stack pointer to the program counter
   379 0000019A 4831C0                  	xor	rax, rax	; zero rax
   380 0000019D 4889C1                  	mov	rcx, rax	; move rax to rcx
   381 000001A0 E8(00000000)            	call	time 		; Get the current time (seed for random)
   382 000001A5 4889C1                  	mov	rcx, rax	; Save rax to rcx again
   383 000001A8 E8(00000000)            	call	srand 		; Seed random number procedure
   384 000001AD E8(00000000)            	call	rand		; call the random number procedure
   385                                  
   386                                  	; rand = (rand % 4) + 1
   387 000001B2 4831D2                  	xor	rdx, rdx	; Clear rdx
   388 000001B5 B904000000              	mov	rcx, 4		; 0 to 4 +1 (I think)
   389 000001BA 48F7F1                  	div 	rcx		; Get the value
   390 000001BD 48FFC2                  	inc 	rdx 		; +1 for 1 through 5
   391 000001C0 48891425[27030000]      	mov	[rando], rdx	; Save it 
   392                                  
   393 000001C8 C9                      leave
   394 000001C9 C3                      ret 
