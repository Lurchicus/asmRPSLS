%!PS-Adobe-3.0
%%BoundingBox: 18 36 577 806
%%Title: Enscript Output
%%Creator: GNU Enscript 1.6.5.90
%%CreationDate: Thu Jan 23 17:37:07 2025
%%Orientation: Portrait
%%Pages: (atend)
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6.5 90
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6.5 90
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 10 10 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [595 842] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-simple 1.6.5 90

/do_header {	% print default simple header
  gsave
    d_header_x d_header_y HFpt_h 3 div add translate

    HF setfont
    user_header_p {
      5 0 moveto user_header_left_str show

      d_header_w user_header_center_str stringwidth pop sub 2 div
      0 moveto user_header_center_str show

      d_header_w user_header_right_str stringwidth pop sub 5 sub
      0 moveto user_header_right_str show
    } {
      5 0 moveto fname show
      45 0 rmoveto fmodstr show
      45 0 rmoveto pagenumstr show
    } ifelse

  grestore
} def
%%EndResource
/d_page_w 559 def
/d_page_h 770 def
/d_header_x 0 def
/d_header_y 755 def
/d_header_w 559 def
/d_header_h 15 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 559 def
/d_footer_h 0 def
/d_output_w 559 def
/d_output_h 755 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (rpsls.asm) def
/fdir (.) def
/ftail (rpsls.asm) def
% User defined strings:
/fmodstr (Tue Dec 24 16:00:54 2024) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
30 742 M (1:) s
48 742 M
(; *************************************************************************) s
30 731 M (2:) s
48 731 M
(; * A Rock Paper Scissors Lizard Spock game in x86 64bit NASM by Dan Rhea *) s
30 720 M (3:) s
48 720 M
(; * following the rules created by by Sam Kass and Karen Bryla.           *) s
30 709 M (4:) s
48 709 M
(; *                                                                       *) s
30 698 M (5:) s
48 698 M
(; * rpsls.asm                                                             *) s
30 687 M (6:) s
48 687 M
(; *                                                                       *) s
30 676 M (7:) s
48 676 M
(; * Extended rules \(beyond Rock, Paper Scissors\)                          *) s
30 665 M (8:) s
48 665 M
(; * Spock smashes scissors and vaporizes rock                             *) s
30 654 M (9:) s
48 654 M
(; * Spock is poisoned by lizard and disproven by paper                    *) s
24 643 M (10:) s
48 643 M
(; * Lizard poisons Spock and eats paper                                   *) s
24 632 M (11:) s
48 632 M
(; * Lizard is crushed by rock and decapitated by scissors                 *) s
24 621 M (12:) s
48 621 M
(; *************************************************************************) s
24 610 M (13:) s
24 599 M (14:) s
48 599 M
(BITS 64) s
24 588 M (15:) s
24 577 M (16:) s
48 577 M
(section .data) s
24 566 M (17:) s
24 555 M (18:) s
48 555 M
(; ************************************************************************) s
24 544 M (19:) s
48 544 M
(; Constants) s
24 533 M (20:) s
48 533 M
(; ************************************************************************) s
24 522 M (21:) s
24 511 M (22:) s
48 511 M
(NOFLOAT equ     0       ; Non-floating point output for Printf \(non-float\)) s
24 500 M (23:) s
48 500 M
(XITCMD  equ     60      ; Exit opcode \(syscall\)) s
24 489 M (24:) s
48 489 M
(WRITEC  equ     1       ; Write syscall) s
24 478 M (25:) s
48 478 M
(NORMAL  equ     0       ; Normal exit flag) s
24 467 M (26:) s
48 467 M
(STDOUT  equ     1       ; Standard output) s
24 456 M (27:) s
48 456 M
(ADLEN   equ     8       ; Address length in bytes) s
24 445 M (28:) s
48 445 M
(BLEN    equ     1       ; Address length in bytes) s
24 434 M (29:) s
48 434 M
(ONE     equ     1       ; One constant) s
24 423 M (30:) s
48 423 M
(ZERO    equ     0       ; Zero constant) s
24 412 M (31:) s
24 401 M (32:) s
48 401 M
(; ************************************************************************) s
24 390 M (33:) s
48 390 M
(; Command strings \(proxies\)) s
24 379 M (34:) s
48 379 M
(; This contains the individual command strings, a byte list of proxy ) s
24 368 M (35:) s
48 368 M
(; numeric values and a list of addresses for the start of each null ) s
24 357 M (36:) s
48 357 M
(; terminated string.) s
24 346 M (37:) s
48 346 M
(; ************************************************************************) s
24 335 M (38:) s
48 335 M
(        proxrck db      "rock",0                ; 0 ) s
24 324 M (39:) s
48 324 M
(        proxpap db      "paper",0               ; 1) s
24 313 M (40:) s
48 313 M
(        proxsrs db      "scissors",0            ; 2) s
24 302 M (41:) s
48 302 M
(        proxliz db      "lizard",0              ; 3) s
24 291 M (42:) s
48 291 M
(        proxspk db      "spock",0               ; 4) s
24 280 M (43:) s
24 269 M (44:) s
48 269 M
(        phelp   db      "help",0                ; 5 \(help request\)) s
24 258 M (45:) s
48 258 M
(        plice   db      "license",0             ; 6 \(license info... MIT\)) s
24 247 M (46:) s
48 247 M
(        pscor   db      "score",0               ; 7 \(score request\)) s
24 236 M (47:) s
48 236 M
(        pdbug   db      "debug",0               ; 8 \(debug mode\)) s
24 225 M (48:) s
48 225 M
(        pquit   db      "quit",0                ; 9 \(quit request\)) s
24 214 M (49:) s
48 214 M
(        pend    db      "end",0                 ; list end address) s
24 203 M (50:) s
24 192 M (51:) s
48 192 M
(        verbnum db      0, 1, 2, 3, 4, 5, 6, 7, 8, 9) s
24 181 M (52:) s
24 170 M (53:) s
48 170 M
(        saddr   dq      $proxrck, $proxpap, $proxsrs, $proxliz, $proxspk) s
24 159 M (54:) s
48 159 M
(                dq      $phelp, $plice, $pscor, $pdbug, $pquit) s
24 148 M (55:) s
48 148 M
(        eaddr   dq      $pend) s
24 137 M (56:) s
24 126 M (57:) s
48 126 M
(; ************************************************************************) s
24 115 M (58:) s
48 115 M
(; Action verb text) s
24 104 M (59:) s
48 104 M
(; This is a list of actions that describe a "combat" resolution \(for) s
24 93 M (60:) s
48 93 M
(; example: rock vs paper, rock "is covered by" paper\). ) s
24 82 M (61:) s
48 82 M
(; The following contains five groups of five strings that describe all the) s
24 71 M (62:) s
48 71 M
(; possible resolutions and a list of the start addres of each null) s
24 60 M (63:) s
48 60 M
(; terminated string.) s
24 49 M (64:) s
48 49 M
(;) s
24 38 M (65:) s
48 38 M
(; Lookup calculation: addr+\(\(\(PLAYERGUESS*5\)+COMPGUESS\)*ADLEN\)) s
24 27 M (66:) s
48 27 M
(;                     verbadd+\(\(\(PLAYERGUESS*5\)+COMPGUESS\)*8\)) s
24 16 M (67:) s
48 16 M
(; ************************************************************************) s
24 5 M (68:) s
48 5 M
(;                       Rock) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (rpsls.asm) def
/fdir (.) def
/ftail (rpsls.asm) def
% User defined strings:
/fmodstr (Tue Dec 24 16:00:54 2024) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
24 742 M (69:) s
48 742 M
(        rck_rck db      "matches",0             ; Rock \(Computer select\)) s
24 731 M (70:) s
48 731 M
(        rck_pap db      "is covered by",0       ; Paper) s
24 720 M (71:) s
48 720 M
(        rck_srs db      "smashes",0             ; Scissors) s
24 709 M (72:) s
48 709 M
(        rck_liz db      "crushes",0             ; Lizard) s
24 698 M (73:) s
48 698 M
(        rck_spk db      "is vaporized by",0     ; Spock) s
24 687 M (74:) s
48 687 M
(;                       Paper) s
24 676 M (75:) s
48 676 M
(        pap_rck db      "covers",0              ; Rock) s
24 665 M (76:) s
48 665 M
(        pap_pap db      "matches",0             ; Paper) s
24 654 M (77:) s
48 654 M
(        pap_srs db      "is cut by",0           ; Scissors) s
24 643 M (78:) s
48 643 M
(        pap_liz db      "is eaten by",0         ; Lizard) s
24 632 M (79:) s
48 632 M
(        pap_spk db      "disproves",0           ; Spock) s
24 621 M (80:) s
48 621 M
(;                       Scissors) s
24 610 M (81:) s
48 610 M
(        srs_rck db      "are broken by",0       ; Rock) s
24 599 M (82:) s
48 599 M
(        srs_pap db      "cuts",0                ; Paper) s
24 588 M (83:) s
48 588 M
(        srs_srs db      "matches",0             ; Scissors) s
24 577 M (84:) s
48 577 M
(        srs_liz db      "decapitates",0         ; Lizard) s
24 566 M (85:) s
48 566 M
(        srs_spk db      "are smashed by",0      ; Spock) s
24 555 M (86:) s
48 555 M
(;                       Lizard) s
24 544 M (87:) s
48 544 M
(        liz_rck db      "is crushed by",0       ; Rock) s
24 533 M (88:) s
48 533 M
(        liz_pap db      "eats",0                ; Paper) s
24 522 M (89:) s
48 522 M
(        liz_srs db      "is decapitated by",0   ; Scissors) s
24 511 M (90:) s
48 511 M
(        liz_liz db      "matches",0             ; Lizard) s
24 500 M (91:) s
48 500 M
(        liz_spk db      "poisons",0             ; Spock) s
24 489 M (92:) s
48 489 M
(;                       Spock) s
24 478 M (93:) s
48 478 M
(        spk_rck db      "vaporizes",0           ; Rock) s
24 467 M (94:) s
48 467 M
(        spk_pap db      "is disproved by",0     ; Paper) s
24 456 M (95:) s
48 456 M
(        spk_srs db      "smashes",0             ; Scissors) s
24 445 M (96:) s
48 445 M
(        spk_liz db      "is poisoned by",0      ; Lizard) s
24 434 M (97:) s
48 434 M
(        spk_spk db      "matches",0             ; Spock) s
24 423 M (98:) s
48 423 M
(        ;               End address) s
24 412 M (99:) s
48 412 M
(        av_end  equ     $) s
18 401 M (100:) s
48 401 M
(; Array of verb addresses \(proxy index * 5\)) s
18 390 M (101:) s
48 390 M
(        verbadd dq      $rck_rck, $rck_pap, $rck_srs, $rck_liz, $rck_spk) s
18 379 M (102:) s
48 379 M
(                dq      $pap_rck, $pap_pap, $pap_srs, $pap_liz, $pap_spk) s
18 368 M (103:) s
48 368 M
(                dq      $srs_rck, $srs_pap, $srs_srs, $srs_liz, $srs_spk) s
18 357 M (104:) s
48 357 M
(                dq      $liz_rck, $liz_pap, $liz_srs, $liz_liz, $liz_spk) s
18 346 M (105:) s
48 346 M
(                dq      $spk_rck, $spk_pap, $spk_srs, $spk_liz, $spk_spk) s
18 335 M (106:) s
48 335 M
(                dq      $av_end) s
18 324 M (107:) s
18 313 M (108:) s
48 313 M
(; ************************************************************************) s
18 302 M (109:) s
48 302 M
(; Results map lookup table) s
18 291 M (110:) s
48 291 M
(; The following table is used to determine a win or loss condition for the) s
18 280 M (111:) s
48 280 M
(; player \(1: player win, -1: Computer win, 0: Tie\). The calculation to ) s
18 269 M (112:) s
48 269 M
(; lookup the action verb above is the same for a lookup into this table.) s
18 258 M (113:) s
48 258 M
(; Also included is the result text and starting address for each null) s
18 247 M (114:) s
48 247 M
(; terminated string. ) s
18 236 M (115:) s
48 236 M
(;) s
18 225 M (116:) s
48 225 M
(; Lookup calculation: resaddr+\(\(\(PLAYERGUESS*5\)+COMPGUESS\)*BLEN\)) s
18 214 M (117:) s
48 214 M
(;                     outcome+\(\(\(PLAYERGUESS*5\)+COMPGUESS\)*1\)) s
18 203 M (118:) s
48 203 M
(;*************************************************************************) s
18 192 M (119:) s
48 192 M
(;                        rck pap srs liz spk     byte int) s
18 181 M (120:) s
48 181 M
(        outcome db       0, -1,  1,  1,  1      ; Rock) s
18 170 M (121:) s
48 170 M
(                db       1,  0, -1, -1,  1      ; Paper) s
18 159 M (122:) s
48 159 M
(                db      -1,  1,  0,  1, -1      ; Scissors) s
18 148 M (123:) s
48 148 M
(                db      -1,  1, -1,  0,  1      ; Lizard) s
18 137 M (124:) s
48 137 M
(                db       1, -1,  1, -1,  0      ; Spock) s
18 126 M (125:) s
48 126 M
(;                       1: Player win, -1: Computer win, 0: Tie) s
18 115 M (126:) s
48 115 M
(        playwin db      "Player wins over computer!",0  ; 1) s
18 104 M (127:) s
48 104 M
(        compwin db      "Player loses to computer!",0   ; -1) s
18 93 M (128:) s
48 93 M
(        bothtie db      "Player ties with computer!",0  ; 0) s
18 82 M (129:) s
48 82 M
(        rsltend equ     $) s
18 71 M (130:) s
48 71 M
(; Result addresss) s
18 60 M (131:) s
48 60 M
(        rsltadd dq      $playwin, $compwin, $bothtie, $rsltend) s
18 49 M (132:) s
18 38 M (133:) s
48 38 M
(; ************************************************************************) s
18 27 M (134:) s
48 27 M
(; Score and "round" info) s
18 16 M (135:) s
48 16 M
(; ************************************************************************) s
18 5 M (136:) s
48 5 M
(        pscore  dq      0       ; Player score) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (rpsls.asm) def
/fdir (.) def
/ftail (rpsls.asm) def
% User defined strings:
/fmodstr (Tue Dec 24 16:00:54 2024) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
18 742 M (137:) s
48 742 M
(        cscore  dq      0       ; Computer score) s
18 731 M (138:) s
48 731 M
(        ties    dq      0       ; Tie results) s
18 720 M (139:) s
48 720 M
(        rounds  dq      0       ; Round counter) s
18 709 M (140:) s
48 709 M
(        rando   dq      0       ; Computer selection 1-5) s
18 698 M (141:) s
48 698 M
(        cmdnum  db      0       ; Command number) s
18 687 M (142:) s
18 676 M (143:) s
48 676 M
(; Flags) s
18 665 M (144:) s
48 665 M
(        debugf  dq      0       ; 0: no debug, 1: debug) s
18 654 M (145:) s
18 643 M (146:) s
48 643 M
(; Generic string) s
18 632 M (147:) s
48 632 M
(        sto     db      "%s",0) s
18 621 M (148:) s
48 621 M
(        stonl   db      0x1b,"[1;32m") s
18 610 M (149:) s
48 610 M
(                db      "%s",10,0) s
18 599 M (150:) s
48 599 M
(        numnl   db      0x1b,"[1;31m") s
18 588 M (151:) s
48 588 M
(                db      "%d",10,0       ) s
18 577 M (152:) s
48 577 M
(        nlst    db      0x1b,"[1;34m") s
18 566 M (153:) s
48 566 M
(                db      "Input string was: ") s
18 555 M (154:) s
48 555 M
(                db      0x1b,"[1;37m","%s",10,0) s
18 544 M (155:) s
18 533 M (156:) s
48 533 M
(                                        ; VT escape code: ) s
18 522 M (157:) s
48 522 M
(        ltWhite db      0x1b,"[1;37m"   ; Light white) s
18 511 M (158:) s
48 511 M
(        ltYellow db     0x1b,"[1;33m"   ; Light yellow) s
18 500 M (159:) s
48 500 M
(        ltBlue  db      0x1b,"[1;34m"   ; Light blue) s
18 489 M (160:) s
48 489 M
(        ltGreen db      0x1b,"[1;32m"   ; Light green) s
18 478 M (161:) s
48 478 M
(        red     db      0x1b,"[0;31m"   ; Red) s
18 467 M (162:) s
18 456 M (163:) s
48 456 M
(; ************************************************************************) s
18 445 M (164:) s
48 445 M
(; Splash screen, help screen and prompt text  ) s
18 434 M (165:) s
48 434 M
(; ************************************************************************) s
18 423 M (166:) s
48 423 M
(        splashs db      0x1b,"[1;34m" ) s
18 412 M (167:) s
48 412 M
(                db      "RPSLS v1.0 a Rock, Paper, Scissors, Lizard, ") s
18 401 M (168:) s
48 401 M
(                db      "Spock game by Dan Rhea, 2024",10) s
18 390 M (169:) s
48 390 M
(                db      "as designed by Sam Kass and Karen Bryla. ") s
18 379 M (170:) s
48 379 M
(                db      "Licensed under the MIT License.",10,10,0) s
18 368 M (171:) s
48 368 M
(; Help) s
18 357 M (172:) s
48 357 M
(        helps   db      0x1b,"[1;34m") s
18 346 M (173:) s
48 346 M
(                db      "Enter 'rock' 'paper' 'scissors' 'lizard' or ") s
18 335 M (174:) s
48 335 M
(                db      "'spock' to play a round or",10) s
18 324 M (175:) s
48 324 M
(                db      "the commands 'help' 'license' 'score' 'debug' ") s
18 313 M (176:) s
48 313 M
(                db      "or 'quit'.",10,10,0) s
18 302 M (177:) s
48 302 M
(; Prompt) s
18 291 M (178:) s
48 291 M
(        prompts db      0x1b,"[1;33m") s
18 280 M (179:) s
48 280 M
(                db      "rpsls: ") s
18 269 M (180:) s
48 269 M
(                db      0x1b,"[1;37m") s
18 258 M (181:) s
48 258 M
(        plen    equ     $-prompts) s
18 247 M (182:) s
48 247 M
(; Error) s
18 236 M (183:) s
48 236 M
(        errmsg  db      0x1b,"[0;31m") s
18 225 M (184:) s
48 225 M
(                db      "I do not understand %s. Please try again.") s
18 214 M (185:) s
48 214 M
(                db      0x1b,"[1;37m",10,0) s
18 203 M (186:) s
48 203 M
(; Goodbye) s
18 192 M (187:) s
48 192 M
(        bye     db      0x1b,"[1;37m") s
18 181 M (188:) s
48 181 M
(                db      "Done! Thanks for playing.",10,0) s
18 170 M (189:) s
18 159 M (190:) s
48 159 M
(        stest   db      "String: Player selected action verb:'%s'.",10,0) s
18 148 M (191:) s
18 137 M (192:) s
48 137 M
(        CGUESS  equ     4) s
18 126 M (193:) s
48 126 M
(        PGUESS  equ     1) s
18 115 M (194:) s
18 104 M (195:) s
48 104 M
(        NL      db      0xa     ; newline       ) s
18 93 M (196:) s
48 93 M
(        inlen   equ     32      ; Max buffer length) s
18 82 M (197:) s
18 71 M (198:) s
48 71 M
(section .bss) s
18 60 M (199:) s
18 49 M (200:) s
48 49 M
(        inbuf   resb    inlen+1 ; room for string and a null terminator) s
18 38 M (201:) s
18 27 M (202:) s
48 27 M
(section .text) s
18 16 M (203:) s
18 5 M (204:) s
48 5 M
(extern  printf          ; Use the c library printf procedure) s
_R
S
%%Page: (4) 4
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (rpsls.asm) def
/fdir (.) def
/ftail (rpsls.asm) def
% User defined strings:
/fmodstr (Tue Dec 24 16:00:54 2024) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
18 742 M (205:) s
48 742 M
(extern  rand            ; C random procedure) s
18 731 M (206:) s
48 731 M
(extern  srand           ; C init random procedure) s
18 720 M (207:) s
48 720 M
(extern  time            ; C init time procedure) s
18 709 M (208:) s
18 698 M (209:) s
48 698 M
(        global  main) s
18 687 M (210:) s
48 687 M
(main:) s
18 676 M (211:) s
48 676 M
(        push    rbp             ; prologue) s
18 665 M (212:) s
48 665 M
(        mov     rbp, rsp) s
18 654 M (213:) s
18 643 M (214:) s
48 643 M
(        mov     rax, ZERO       ; Init debug toggle off) s
18 632 M (215:) s
48 632 M
(        mov     [debugf], rax   ; Save it) s
18 621 M (216:) s
18 610 M (217:) s
48 610 M
(        ;mov    rax, NOFLOAT) s
18 599 M (218:) s
48 599 M
(        ;mov    rdi, stest) s
18 588 M (219:) s
48 588 M
(        ;mov    rsi, [verbadd+\(\(\(PGUESS*5\)+CGUESS\)*ADLEN\)] ) s
18 577 M (220:) s
48 577 M
(        ;call   printf) s
18 566 M (221:) s
18 555 M (222:) s
48 555 M
(; Show splash) s
18 544 M (223:) s
48 544 M
(splash:) s
18 533 M (224:) s
48 533 M
(        mov     rax, NOFLOAT    ; non-float output) s
18 522 M (225:) s
48 522 M
(        mov     rdi, sto        ; string format \(%s\)) s
18 511 M (226:) s
48 511 M
(        mov     rsi, splashs    ; text to output) s
18 500 M (227:) s
48 500 M
(        call    printf) s
18 489 M (228:) s
48 489 M
(        jmp     help;) s
18 478 M (229:) s
48 478 M
(; Show error message) s
18 467 M (230:) s
48 467 M
(error:) s
18 456 M (231:) s
48 456 M
(        mov     rax, NOFLOAT    ; non-float output) s
18 445 M (232:) s
48 445 M
(        mov     rdi, errmsg     ; error message) s
18 434 M (233:) s
48 434 M
(        mov     rsi, inbuf      ; input buffer) s
18 423 M (234:) s
48 423 M
(        call    printf) s
18 412 M (235:) s
48 412 M
(; Show help \(basic commands\)) s
18 401 M (236:) s
48 401 M
(help:) s
18 390 M (237:) s
48 390 M
(        mov     rax, NOFLOAT    ; non-float output) s
18 379 M (238:) s
48 379 M
(        mov     rdi, sto        ; string format \(%s\)) s
18 368 M (239:) s
48 368 M
(        mov     rsi, helps      ; help text) s
18 357 M (240:) s
48 357 M
(        call    printf) s
18 346 M (241:) s
18 335 M (242:) s
48 335 M
(; Show prompt) s
18 324 M (243:) s
48 324 M
(prompt:) s
18 313 M (244:) s
48 313 M
(        mov     rax, WRITEC     ; Write) s
18 302 M (245:) s
48 302 M
(        mov     rdi, STDOUT     ; Standard out) s
18 291 M (246:) s
48 291 M
(        mov     rsi, prompts    ; Player prompt) s
18 280 M (247:) s
48 280 M
(        mov     rdx, plen       ; Prompt length) s
18 269 M (248:) s
48 269 M
(        syscall) s
18 258 M (249:) s
18 247 M (250:) s
48 247 M
(; Get input from player) s
18 236 M (251:) s
48 236 M
(        mov     rdi, inbuf      ; Input buffer) s
18 225 M (252:) s
48 225 M
(        mov     rsi, inlen      ; Buffer length) s
18 214 M (253:) s
48 214 M
(        call    reads) s
18 203 M (254:) s
18 192 M (255:) s
48 192 M
(; Get computer input and show it \(random pick\)) s
18 181 M (256:) s
48 181 M
(        call    getrand ; Get a random number) s
18 170 M (257:) s
48 170 M
(        mov rax, NOFLOAT        ; non-float output) s
18 159 M (258:) s
48 159 M
(        mov rdi, numnl  ; number format \(%d\)) s
18 148 M (259:) s
48 148 M
(        mov rsi, [rando]        ; computer selection) s
18 137 M (260:) s
48 137 M
(        call    printf) s
18 126 M (261:) s
18 115 M (262:) s
48 115 M
(; for now, echo input and exit) s
18 104 M (263:) s
48 104 M
(        mov     rax, NOFLOAT) s
18 93 M (264:) s
48 93 M
(        mov     rdi, nlst) s
18 82 M (265:) s
48 82 M
(        mov     rsi, inbuf) s
18 71 M (266:) s
48 71 M
(        call    printf) s
18 60 M (267:) s
18 49 M (268:) s
48 49 M
(; Convert input to numeric offset \(0-4, 5-9\) \(proxies and commands\)) s
18 38 M (269:) s
18 27 M (270:) s
48 27 M
(; This starts with traversing the command address table \(starts) s
18 16 M (271:) s
48 16 M
(; at saddr\). ) s
18 5 M (272:) s
48 5 M
(; For now just output the strings the addresses point to.) s
_R
S
%%Page: (5) 5
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (rpsls.asm) def
/fdir (.) def
/ftail (rpsls.asm) def
% User defined strings:
/fmodstr (Tue Dec 24 16:00:54 2024) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
18 742 M (273:) s
48 742 M
(        mov     rdx, saddr      ; Address of command address table) s
18 731 M (274:) s
48 731 M
(shocmd: mov     rax, NOFLOAT    ; Ascii'ish data) s
18 720 M (275:) s
48 720 M
(        mov     rdi, stonl      ; Output format) s
18 709 M (276:) s
48 709 M
(        mov     rsi, [rdx]      ; Command string) s
18 698 M (277:) s
48 698 M
(        push    rdx             ; Save rdx contents) s
18 687 M (278:) s
48 687 M
(        call    printf          ; Output the string) s
18 676 M (279:) s
48 676 M
(        pop     rdx             ; Restore rdx) s
18 665 M (280:) s
48 665 M
(        add     rdx, ADLEN      ; Bump to the next 64bit address) s
18 654 M (281:) s
48 654 M
(        cmp     rdx, eaddr      ; This the end of the address table?) s
18 643 M (282:) s
48 643 M
(        je      endit           ; Yes, finish) s
18 632 M (283:) s
48 632 M
(        jmp     shocmd          ; No, get the next command string) s
18 621 M (284:) s
48 621 M
(endit:  jmp     end             ; For now) s
18 610 M (285:) s
18 599 M (286:) s
48 599 M
(; Get random pick for computer) s
18 588 M (287:) s
48 588 M
(; Process commands if one is selected) s
18 577 M (288:) s
48 577 M
(;       5: Show help again \(go to help\)) s
18 566 M (289:) s
48 566 M
(dohelp:) s
18 555 M (290:) s
48 555 M
(        jmp     help            ; show help and reprompt) s
18 544 M (291:) s
18 533 M (292:) s
48 533 M
(;       6: Show MIT license) s
18 522 M (293:) s
48 522 M
(;       7: Show current score) s
18 511 M (294:) s
48 511 M
(;       8: Toggle debug \(verbose info\)) s
18 500 M (295:) s
48 500 M
(debug:) s
18 489 M (296:) s
48 489 M
(        push    rax             ; Save the rax register) s
18 478 M (297:) s
48 478 M
(        mov     rax, [debugf]   ; Get the current debug flag setting) s
18 467 M (298:) s
48 467 M
(        cmp     rax, ONE        ; Is it a one) s
18 456 M (299:) s
48 456 M
(        jz      skipoff         ; No, go toggle on) s
18 445 M (300:) s
48 445 M
(        mov     rax, ZERO       ; Yes, set toggle off) s
18 434 M (301:) s
48 434 M
(        jmp     savetg          ; skip toggle on) s
18 423 M (302:) s
48 423 M
(skipoff:) s
18 412 M (303:) s
48 412 M
(        mov     rax, ONE        ; Set toggle on) s
18 401 M (304:) s
48 401 M
(savetg: ) s
18 390 M (305:) s
48 390 M
(        mov     [debugf], rax   ; Save new toggle value) s
18 379 M (306:) s
48 379 M
(        pop     rax             ; Restore the rax register) s
18 368 M (307:) s
48 368 M
(        jmp     prompt          ; reprompt) s
18 357 M (308:) s
18 346 M (309:) s
48 346 M
(;       9: Quit \(show score and quit\)) s
18 335 M (310:) s
48 335 M
(quit:) s
18 324 M (311:) s
48 324 M
(        ; show score then exit) s
18 313 M (312:) s
48 313 M
(        jmp     end) s
18 302 M (313:) s
48 302 M
(;       0-4: Determine outcome based on proxies) s
18 291 M (314:) s
48 291 M
(; update scores) s
18 280 M (315:) s
48 280 M
(; Output round resuts) s
18 269 M (316:) s
48 269 M
(; Update round) s
18 258 M (317:) s
48 258 M
(; Go to prompt) s
18 247 M (318:) s
48 247 M
(        jmp     prompt          ; reprompt) s
18 236 M (319:) s
18 225 M (320:) s
48 225 M
(end:) s
18 214 M (321:) s
48 214 M
(        mov     rax, NOFLOAT    ; non-float output) s
18 203 M (322:) s
48 203 M
(        mov     rdi, sto        ; string format \(%s\)) s
18 192 M (323:) s
48 192 M
(        mov     rsi, bye        ; goodbye message) s
18 181 M (324:) s
48 181 M
(        call    printf) s
18 170 M (325:) s
18 159 M (326:) s
48 159 M
(        mov     rsp, rbp        ; epilogue. Reset the stack pointer) s
18 148 M (327:) s
48 148 M
(        pop     rbp             ; restore the program counter) s
18 137 M (328:) s
18 126 M (329:) s
48 126 M
(        mov     rax, XITCMD     ; exit) s
18 115 M (330:) s
48 115 M
(        mov     rdi, NORMAL     ; normal exit) s
18 104 M (331:) s
48 104 M
(        syscall) s
18 93 M (332:) s
18 82 M (333:) s
48 82 M
(; *********************************************************************) s
18 71 M (334:) s
48 71 M
(; * reads \("safe" string reader\), from                                *) s
18 60 M (335:) s
48 60 M
(; * Beginning x64 Assembly Programming by Jo Van Hoey \(Pages 163-165\) * ) s
18 49 M (336:) s
48 49 M
(; * I have redone the comments to insure I understand what the        *) s
18 38 M (337:) s
48 38 M
(; * procedure does and how it works.                                  *) s
18 27 M (338:) s
48 27 M
(; *********************************************************************) s
18 16 M (339:) s
48 16 M
(reads:) s
18 5 M (340:) s
_R
S
%%Page: (6) 6
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (rpsls.asm) def
/fdir (.) def
/ftail (rpsls.asm) def
% User defined strings:
/fmodstr (Tue Dec 24 16:00:54 2024) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
18 742 M (341:) s
48 742 M
(section .data) s
18 731 M (342:) s
18 720 M (343:) s
48 720 M
(section .bss) s
18 709 M (344:) s
18 698 M (345:) s
48 698 M
(        .inputc resb    1       ; Single character) s
18 687 M (346:) s
18 676 M (347:) s
48 676 M
(section .text) s
18 665 M (348:) s
18 654 M (349:) s
48 654 M
(        push    rbp             ; Save the program counter) s
18 643 M (350:) s
48 643 M
(        mov     rbp, rsp        ; Move the stack pointer to the program counter) s
18 632 M (351:) s
48 632 M
(        push    r12             ; save registers for argument use) s
18 621 M (352:) s
48 621 M
(        push    r13) s
18 610 M (353:) s
48 610 M
(        push    r14) s
18 599 M (354:) s
48 599 M
(        mov     r12, rdi        ; Address of input buffer) s
18 588 M (355:) s
48 588 M
(        mov     r13, rsi        ; Max length to r13) s
18 577 M (356:) s
48 577 M
(        xor     r14, r14        ; Character counter) s
18 566 M (357:) s
48 566 M
(.readc:) s
18 555 M (358:) s
48 555 M
(        mov     rax, 0          ; Read opcode) s
18 544 M (359:) s
48 544 M
(        mov     rdi, 1          ; Set stdin) s
18 533 M (360:) s
48 533 M
(        lea     rsi, [.inputc]  ; Input address) s
18 522 M (361:) s
48 522 M
(        mov     rdx, 1          ; characters to read) s
18 511 M (362:) s
48 511 M
(        syscall) s
18 500 M (363:) s
48 500 M
(        mov     al, [.inputc]   ; Input...) s
18 489 M (364:) s
48 489 M
(        cmp     al, byte[NL]    ; a newline?) s
18 478 M (365:) s
48 478 M
(        je      .done           ; end of input) s
18 467 M (366:) s
48 467 M
(        cmp     al, 97          ; less than 'a'?) s
18 456 M (367:) s
48 456 M
(        jl      .readc          ; Yes, ignore it) s
18 445 M (368:) s
48 445 M
(        cmp     al, 122         ; Greater than 'z'?) s
18 434 M (369:) s
48 434 M
(        jg      .readc          ; Yes, ignore as well) s
18 423 M (370:) s
48 423 M
(        inc     r14             ; Increment 'valid' input count) s
18 412 M (371:) s
48 412 M
(        cmp     r14, r13        ; max input?) s
18 401 M (372:) s
48 401 M
(        ja      .readc          ; Ignore stuff that would overflow the buffer) s
18 390 M (373:) s
48 390 M
(        mov     byte [r12], al  ; Save safe byte to buffer) s
18 379 M (374:) s
48 379 M
(        inc     r12             ; point to next byte in buffer) s
18 368 M (375:) s
48 368 M
(        jmp     .readc          ; get next character) s
18 357 M (376:) s
48 357 M
(.done:) s
18 346 M (377:) s
48 346 M
(        inc     r12             ; bump buffer pointer) s
18 335 M (378:) s
48 335 M
(        mov     byte [r12], 0   ; zero terminate the buffer) s
18 324 M (379:) s
48 324 M
(        pop     r14             ; restore registers) s
18 313 M (380:) s
48 313 M
(        pop     r13) s
18 302 M (381:) s
48 302 M
(        pop     r12) s
18 291 M (382:) s
48 291 M
(leave) s
18 280 M (383:) s
48 280 M
(ret) s
18 269 M (384:) s
18 258 M (385:) s
48 258 M
(; *********************************************************************) s
18 247 M (386:) s
48 247 M
(; Get a random number of 0 to 4 \(Computer guess\)) s
18 236 M (387:) s
48 236 M
(; *********************************************************************) s
18 225 M (388:) s
48 225 M
(getrand:) s
18 214 M (389:) s
18 203 M (390:) s
48 203 M
(section .data   ) s
18 192 M (391:) s
18 181 M (392:) s
48 181 M
(section .bss) s
18 170 M (393:) s
18 159 M (394:) s
48 159 M
(section .text) s
18 148 M (395:) s
18 137 M (396:) s
48 137 M
(        push    rbp             ; Save the program counter) s
18 126 M (397:) s
48 126 M
(        mov     rbp, rsp        ; Move the stack pointer to the program counter) s
18 115 M (398:) s
48 115 M
(        ; =======) s
18 104 M (399:) s
48 104 M
(        mov     rax, 1          ; Force 1) s
18 93 M (400:) s
48 93 M
(        mov     [rando], rax    ; Save it) s
18 82 M (401:) s
48 82 M
(        mov     rax, NOFLOAT    ; non-float output) s
18 71 M (402:) s
48 71 M
(        mov     rdi, numnl      ; number format \(%d\)) s
18 60 M (403:) s
48 60 M
(        mov     rsi, [rando]    ; computer selection) s
18 49 M (404:) s
48 49 M
(        call    printf) s
18 38 M (405:) s
48 38 M
(        ; =======) s
18 27 M (406:) s
48 27 M
(        xor     rax, rax        ; zero rax) s
18 16 M (407:) s
48 16 M
(        mov     rcx, rax        ; move rax to rcx) s
18 5 M (408:) s
48 5 M
(        call    time            ; Get the current time \(seed for random\)) s
_R
S
%%Page: (7) 7
%%BeginPageSetup
_S
18 36 translate
/pagenum 7 def
/fname (rpsls.asm) def
/fdir (.) def
/ftail (rpsls.asm) def
% User defined strings:
/fmodstr (Tue Dec 24 16:00:54 2024) def
/pagenumstr (7) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
18 742 M (409:) s
18 731 M (410:) s
48 731 M
(        ; =======) s
18 720 M (411:) s
48 720 M
(        mov     rax, 2          ; Force 2) s
18 709 M (412:) s
48 709 M
(        mov     [rando], rax    ; Save it) s
18 698 M (413:) s
48 698 M
(        mov     rax, NOFLOAT    ; non-float output) s
18 687 M (414:) s
48 687 M
(        mov     rdi, numnl      ; number format \(%d\)) s
18 676 M (415:) s
48 676 M
(        mov     rsi, [rando]    ; computer selection) s
18 665 M (416:) s
48 665 M
(        call    printf) s
18 654 M (417:) s
48 654 M
(        ; =======) s
18 643 M (418:) s
18 632 M (419:) s
48 632 M
(        mov     rcx, rax        ; Save rax to rcx again) s
18 621 M (420:) s
48 621 M
(        call    srand           ; Seed random number procedure) s
18 610 M (421:) s
48 610 M
(        ; =======) s
18 599 M (422:) s
48 599 M
(        mov     rax, 3          ; Force 3) s
18 588 M (423:) s
48 588 M
(        mov     [rando], rax    ; Save it) s
18 577 M (424:) s
48 577 M
(        mov     rax, NOFLOAT    ; non-float output) s
18 566 M (425:) s
48 566 M
(        mov     rdi, numnl      ; number format \(%d\)) s
18 555 M (426:) s
48 555 M
(        mov     rsi, [rando]    ; computer selection) s
18 544 M (427:) s
48 544 M
(        call    printf) s
18 533 M (428:) s
48 533 M
(        ; =======) s
18 522 M (429:) s
18 511 M (430:) s
48 511 M
(        call    rand            ; call the random number procedure) s
18 500 M (431:) s
18 489 M (432:) s
48 489 M
(        ; rand = \(rand % 4\) + 1) s
18 478 M (433:) s
48 478 M
(        xor     rdx, rdx        ; Clear rdx) s
18 467 M (434:) s
48 467 M
(        mov     rcx, 5          ; 0 to 4 +1 \(I think\)) s
18 456 M (435:) s
48 456 M
(        div     rcx             ; Get the value) s
18 445 M (436:) s
48 445 M
(        ;inc    rdx             ; +1 for 1 through 5 \(one base\)) s
18 434 M (437:) s
48 434 M
(        mov     [rando], rdx    ; Save it ) s
18 423 M (438:) s
18 412 M (439:) s
48 412 M
(.lret:) s
18 401 M (440:) s
48 401 M
(leave) s
18 390 M (441:) s
48 390 M
(ret ) s
_R
S
%%Trailer
%%Pages: 7
%%DocumentNeededResources: font Courier-Bold Courier 
%%EOF
